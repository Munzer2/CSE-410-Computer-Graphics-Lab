#include "out.h"



int _init(EVP_PKEY_CTX *ctx)

{
  int iVar1;
  
  iVar1 = __gmon_start__();
  return iVar1;
}



void FUN_00101020(void)

{
  (*(code *)(undefined *)0x0)();
  return;
}



void __cxa_finalize(void)

{
  __cxa_finalize();
  return;
}



void glutInitWindowPosition(void)

{
  glutInitWindowPosition();
  return;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked

int printf(char *__format,...)

{
  int iVar1;
  
  iVar1 = printf(__format);
  return iVar1;
}



void glutSwapBuffers(void)

{
  glutSwapBuffers();
  return;
}



void glPointSize(void)

{
  glPointSize();
  return;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked

double sin(double __x)

{
  double dVar1;
  
  dVar1 = sin(__x);
  return dVar1;
}



void glBegin(void)

{
  glBegin();
  return;
}



void glClear(void)

{
  glClear();
  return;
}



void glutGet(void)

{
  glutGet();
  return;
}



void glutPostRedisplay(void)

{
  glutPostRedisplay();
  return;
}



void glutInitDisplayMode(void)

{
  glutInitDisplayMode();
  return;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked

tm * localtime(time_t *__timer)

{
  tm *ptVar1;
  
  ptVar1 = localtime(__timer);
  return ptVar1;
}



void gluLookAt(void)

{
  gluLookAt();
  return;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked

time_t time(time_t *__timer)

{
  time_t tVar1;
  
  tVar1 = time(__timer);
  return tVar1;
}



void glEnable(void)

{
  glEnable();
  return;
}



void glutIdleFunc(void)

{
  glutIdleFunc();
  return;
}



void __stack_chk_fail(void)

{
                    // WARNING: Subroutine does not return
  __stack_chk_fail();
}



void gluPerspective(void)

{
  gluPerspective();
  return;
}



void glVertex2f(void)

{
  glVertex2f();
  return;
}



void glutInit(void)

{
  glutInit();
  return;
}



void glLoadIdentity(void)

{
  glLoadIdentity();
  return;
}



void glutMainLoop(void)

{
  glutMainLoop();
  return;
}



void glEnd(void)

{
  glEnd();
  return;
}



void glMatrixMode(void)

{
  glMatrixMode();
  return;
}



void glClearColor(void)

{
  glClearColor();
  return;
}



void glutInitWindowSize(void)

{
  glutInitWindowSize();
  return;
}



void glutCreateWindow(void)

{
  glutCreateWindow();
  return;
}



void glLineWidth(void)

{
  glLineWidth();
  return;
}



void glutDisplayFunc(void)

{
  glutDisplayFunc();
  return;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked

double cos(double __x)

{
  double dVar1;
  
  dVar1 = cos(__x);
  return dVar1;
}



void glColor3f(void)

{
  glColor3f();
  return;
}



void glVertex3f(void)

{
  glVertex3f();
  return;
}



void processEntry _start(undefined8 param_1,undefined8 param_2)

{
  undefined1 auStack_8 [8];
  
  __libc_start_main(main,param_2,&stack0x00000008,0,0,param_1,auStack_8);
  do {
                    // WARNING: Do nothing block with infinite loop
  } while( true );
}



// WARNING: Removing unreachable block (ram,0x00101463)
// WARNING: Removing unreachable block (ram,0x0010146f)

void deregister_tm_clones(void)

{
  return;
}



// WARNING: Removing unreachable block (ram,0x001014a4)
// WARNING: Removing unreachable block (ram,0x001014b0)

void register_tm_clones(void)

{
  return;
}



void __do_global_dtors_aux(void)

{
  if (completed_0 != '\0') {
    return;
  }
  __cxa_finalize(__dso_handle);
  deregister_tm_clones();
  completed_0 = 1;
  return;
}



void frame_dummy(void)

{
  register_tm_clones();
  return;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked
// drawAxes()

void drawAxes(void)

{
  if (drawaxes == 1) {
    glColor3f(0x3f800000);
    glBegin(1);
    glVertex3f(0x42c80000,0,0);
    glVertex3f(0xc2c80000,0,0);
    glVertex3f(0);
    glVertex3f(0);
    glVertex3f(0,0);
    glVertex3f(0,0);
    glEnd();
  }
  return;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked
// drawGrid()

void drawGrid(void)

{
  undefined4 local_c;
  
  if (drawgrid == 1) {
    glColor3f(0x3f19999a,0x3f19999a);
    glBegin(1);
    for (local_c = -8; local_c < 9; local_c = local_c + 1) {
      if (local_c != 0) {
        glVertex3f((float)(local_c * 10),0xc2b40000,0);
        glVertex3f((float)(local_c * 10),0x42b40000);
        glVertex3f(0xc2b40000,(float)(local_c * 10));
        glVertex3f(0x42b40000,(float)(local_c * 10));
      }
    }
    glEnd();
  }
  return;
}



// drawSquare(double)

void drawSquare(double param_1)

{
  glBegin(7);
  glVertex3f((float)param_1,(float)param_1,0x40000000);
  glVertex3f((float)param_1,-(float)param_1,0x40000000);
  glVertex3f(-(float)param_1,-(float)param_1,0x40000000);
  glVertex3f(-(float)param_1,(float)param_1,0x40000000);
  glEnd();
  return;
}



// drawCircle(double, int)

void drawCircle(double param_1,int param_2)

{
  int iVar1;
  long lVar2;
  ulong uVar3;
  undefined1 *puVar4;
  long in_FS_OFFSET;
  double dVar5;
  double dVar6;
  undefined1 auStack_48 [4];
  int local_44;
  double local_40;
  int local_34;
  long local_30;
  undefined1 *local_28;
  long local_20;
  
  local_40 = param_1;
  local_44 = param_2;
  local_20 = *(long *)(in_FS_OFFSET + 0x28);
  iVar1 = param_2 + 1;
  local_30 = (long)iVar1 + -1;
  uVar3 = (((long)iVar1 * 0x18 + 0xfU) / 0x10) * 0x10;
  for (puVar4 = auStack_48; puVar4 != auStack_48 + -(uVar3 & 0xfffffffffffff000);
      puVar4 = puVar4 + -0x1000) {
    *(undefined8 *)(puVar4 + -8) = *(undefined8 *)(puVar4 + -8);
  }
  lVar2 = -(ulong)((uint)uVar3 & 0xfff);
  if ((uVar3 & 0xfff) != 0) {
    *(undefined8 *)(puVar4 + ((ulong)((uint)uVar3 & 0xfff) - 8) + lVar2) =
         *(undefined8 *)(puVar4 + ((ulong)((uint)uVar3 & 0xfff) - 8) + lVar2);
  }
  local_28 = puVar4 + lVar2;
  *(undefined8 *)(puVar4 + lVar2 + -8) = 0x101954;
  glColor3f(0x3f333333,0x10,(long)iVar1);
  for (local_34 = 0; local_34 <= local_44; local_34 = local_34 + 1) {
    dVar5 = (double)local_34;
    dVar6 = (double)local_44;
    *(undefined8 *)(puVar4 + lVar2 + -8) = 0x101999;
    dVar5 = cos((dVar5 / dVar6 + dVar5 / dVar6) * 3.141592653589793);
    *(double *)(local_28 + (long)local_34 * 0x18) = dVar5 * local_40;
    dVar5 = (double)local_34;
    dVar6 = (double)local_44;
    *(undefined8 *)(puVar4 + lVar2 + -8) = 0x1019ff;
    dVar5 = sin((dVar5 / dVar6 + dVar5 / dVar6) * 3.141592653589793);
    *(double *)(local_28 + (long)local_34 * 0x18 + 8) = dVar5 * local_40;
  }
  for (local_34 = 0; local_34 < local_44; local_34 = local_34 + 1) {
    *(undefined8 *)(puVar4 + lVar2 + -8) = 0x101a56;
    glBegin(1);
    dVar5 = *(double *)(local_28 + (long)local_34 * 0x18);
    *(undefined8 *)(puVar4 + lVar2 + -8) = 0x101ab6;
    glVertex3f((float)dVar5);
    dVar5 = *(double *)(local_28 + (long)(local_34 + 1) * 0x18);
    *(undefined8 *)(puVar4 + lVar2 + -8) = 0x101b1c;
    glVertex3f((float)dVar5);
    *(undefined8 *)(puVar4 + lVar2 + -8) = 0x101b21;
    glEnd();
  }
  if (local_20 != *(long *)(in_FS_OFFSET + 0x28)) {
                    // WARNING: Subroutine does not return
    __stack_chk_fail();
  }
  return;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked
// drawHands()

void drawHands(void)

{
  double dVar1;
  
  glColor3f(0x3f800000,0,0);
  glLineWidth(0x40000000);
  glBegin(1);
  dVar1 = sin(angle_second);
  cos(angle_second);
  glVertex2f(0,0);
  glVertex2f((float)(dVar1 * 60.0));
  glEnd();
  glColor3f(0x3f800000);
  glLineWidth(0x40400000);
  glBegin(1);
  dVar1 = sin(angle_minute);
  cos(angle_minute);
  glVertex2f(0,0);
  glVertex2f((float)(dVar1 * 50.0));
  glEnd();
  glColor3f(0x3f800000);
  glLineWidth(0x40800000);
  glBegin(1);
  dVar1 = sin(angle_hour);
  cos(angle_hour);
  glVertex2f(0,0);
  glVertex2f((float)(dVar1 * 40.0));
  glEnd();
  glLineWidth(0x3f800000);
  return;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked
// drawClock()

void drawClock(void)

{
  double dVar1;
  double dVar2;
  double dVar3;
  undefined4 local_5c;
  undefined8 local_58;
  
  for (local_5c = 0; local_5c < 0x3c; local_5c = local_5c + 1) {
    glBegin(1);
    dVar1 = cos((double)local_5c * 0.10471975511965977);
    sin((double)local_5c * 0.10471975511965977);
    if (local_5c % 5 == 0) {
      local_58 = cos((double)local_5c * 0.10471975511965977);
      local_58 = local_58 * 70.0;
      sin((double)local_5c * 0.10471975511965977);
    }
    else {
      local_58 = cos((double)local_5c * 0.10471975511965977);
      local_58 = local_58 * 75.0;
      sin((double)local_5c * 0.10471975511965977);
    }
    glVertex2f((float)(dVar1 * 80.0));
    glVertex2f((float)local_58);
    glEnd();
  }
  drawCircle(85.0,100);
  dVar1 = sin(angle_second);
  cos(angle_second);
  dVar2 = sin(angle_minute);
  cos(angle_minute);
  dVar3 = sin(angle_hour);
  cos(angle_hour);
  glPointSize(0x41200000);
  glBegin(0);
  glColor3f(0x3f800000,0,0);
  glVertex2f((float)(dVar1 * 85.0));
  glColor3f(0x3f800000);
  glVertex2f((float)(dVar2 * 85.0));
  glVertex2f((float)(dVar3 * 85.0));
  glEnd();
  return;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked
// drawPendulum()

void drawPendulum(void)

{
  int iVar1;
  double dVar2;
  double dVar3;
  undefined4 local_5c;
  
  iVar1 = glutGet(700);
  dVar2 = cos(((double)iVar1 / 1000.0) * 3.141592653589793 + 0.0);
  glBegin(1);
  dVar3 = sin(dVar2 * 0.7853981633974483);
  dVar3 = dVar3 * -70.0 + 0.0;
  cos(dVar2 * 0.7853981633974483);
  glVertex2f(0);
  glVertex2f((float)dVar3);
  glEnd();
  glBegin(9);
  glColor3f(0x3f800000);
  for (local_5c = 0.0; local_5c < 360.0; local_5c = local_5c + 10.0) {
    dVar2 = cos((double)(local_5c / 180.0) * 3.141592653589793);
    sin((double)(local_5c / 180.0) * 3.141592653589793);
    glVertex2f((float)(dVar2 * 10.0 + dVar3));
  }
  glEnd();
  return;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked
// display()

void display(void)

{
  glClear(0x4100);
  glClearColor(0,0,0,0);
  glClear(0x4100);
  glMatrixMode(0x1700);
  glLoadIdentity();
  gluLookAt(0,0,0x4069000000000000,0,0,0,0,0x3ff0000000000000);
  glMatrixMode(0x1700);
  drawHands();
  drawClock();
  glutSwapBuffers();
  return;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked
// animate()

void animate(void)

{
  int iVar1;
  
  iVar1 = glutGet(700);
  angle_second = (double)(iVar1 + mili_second) * 0.00010471975511965977;
  if (1.0 <= (float)(iVar1 - old_t) / 1000.0) {
    angle_minute = (double)minute * 0.10471975511965977;
    angle_hour = (double)(minute + hour * 0x3c) * 0.008726646259971648;
    second = second + 1;
    if (0x3b < second) {
      second = 0;
      minute = minute + 1;
    }
    old_t = iVar1;
    if (0x3b < minute) {
      minute = 0;
      hour = hour + 1;
    }
  }
  glutPostRedisplay();
  return;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked
// init()

void init(void)

{
  int iVar1;
  long in_FS_OFFSET;
  time_t local_20;
  tm *local_18;
  long local_10;
  
  local_10 = *(long *)(in_FS_OFFSET + 0x28);
  time(&local_20);
  local_18 = localtime(&local_20);
  iVar1 = local_18->tm_hour;
  hour = iVar1 + ((iVar1 / 6 + (iVar1 >> 0x1f) >> 1) - (iVar1 >> 0x1f)) * -0xc;
  minute = local_18->tm_min % 0x3c;
  second = local_18->tm_sec % 0x3c;
  mili_second = second * 1000;
  angle_second = (double)mili_second * 0.00010471975511965977;
  angle_minute = (double)minute * 0.10471975511965977;
  angle_hour = (double)(int)(minute + hour * 0x3c) * 0.008726646259971648;
  printf("%d",(ulong)hour);
  drawgrid = 0;
  drawaxes = 1;
  cameraHeight = 0x4062c00000000000;
  cameraAngle = 0x3ff0000000000000;
  angle_second = 0.0;
  glClearColor(0,0,0,0);
  glMatrixMode(0x1701);
  glLoadIdentity();
  gluPerspective(0x4054000000000000,0x3ff0000000000000,0x3ff0000000000000,0x408f400000000000);
  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {
                    // WARNING: Subroutine does not return
    __stack_chk_fail();
  }
  return;
}



undefined8 main(undefined4 param_1,undefined8 param_2)

{
  undefined4 local_c;
  
  local_c = param_1;
  glutInit(&local_c,param_2);
  glutInitWindowSize(500,500);
  glutInitWindowPosition(0,0);
  glutInitDisplayMode(0x12);
  glutCreateWindow("Analog Clock");
  init();
  glEnable(0xb71);
  glutDisplayFunc(display);
  glutIdleFunc(animate);
  glutMainLoop();
  return 0;
}



void _fini(void)

{
  return;
}



