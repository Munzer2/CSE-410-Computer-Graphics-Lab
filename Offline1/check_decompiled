#include "out.h"



int _init(EVP_PKEY_CTX *ctx)

{
  int iVar1;
  
  iVar1 = __gmon_start__();
  return iVar1;
}



void FUN_00102020(void)

{
  (*(code *)(undefined *)0x0)();
  return;
}



void __cxa_finalize(void)

{
  __cxa_finalize();
  return;
}



void glutInitWindowPosition(void)

{
  glutInitWindowPosition();
  return;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked

int printf(char *__format,...)

{
  int iVar1;
  
  iVar1 = printf(__format);
  return iVar1;
}



void glutSwapBuffers(void)

{
  glutSwapBuffers();
  return;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked

double sin(double __x)

{
  double dVar1;
  
  dVar1 = sin(__x);
  return dVar1;
}



void glBegin(void)

{
  glBegin();
  return;
}



void glClear(void)

{
  glClear();
  return;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked

int rand(void)

{
  int iVar1;
  
  iVar1 = rand();
  return iVar1;
}



void glutGet(void)

{
  glutGet();
  return;
}



void glutPostRedisplay(void)

{
  glutPostRedisplay();
  return;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked

void std::__throw_bad_alloc(void)

{
  __throw_bad_alloc();
  return;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked

void std::__throw_length_error(char *param_1)

{
  __throw_length_error(param_1);
  return;
}



void glutInitDisplayMode(void)

{
  glutInitDisplayMode();
  return;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked

void __assert_fail(char *__assertion,char *__file,uint __line,char *__function)

{
                    // WARNING: Subroutine does not return
  __assert_fail(__assertion,__file,__line,__function);
}



// WARNING: Unknown calling convention -- yet parameter storage is locked

void std::__throw_bad_array_new_length(void)

{
  __throw_bad_array_new_length();
  return;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked

double sqrt(double __x)

{
  double dVar1;
  
  dVar1 = sqrt(__x);
  return dVar1;
}



void gluLookAt(void)

{
  gluLookAt();
  return;
}



void __cxa_atexit(void)

{
  __cxa_atexit();
  return;
}



void glutKeyboardFunc(void)

{
  glutKeyboardFunc();
  return;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked

time_t time(time_t *__timer)

{
  time_t tVar1;
  
  tVar1 = time(__timer);
  return tVar1;
}



void glEnable(void)

{
  glEnable();
  return;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked

double acos(double __x)

{
  double dVar1;
  
  dVar1 = acos(__x);
  return dVar1;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked

void srand(uint __seed)

{
  srand(__seed);
  return;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked

void * operator_new(ulong param_1)

{
  void *pvVar1;
  
  pvVar1 = operator_new(param_1);
  return pvVar1;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked

void operator_delete(void *param_1,ulong param_2)

{
  operator_delete(param_1,param_2);
  return;
}



void glutSpecialFunc(void)

{
  glutSpecialFunc();
  return;
}



void glutIdleFunc(void)

{
  glutIdleFunc();
  return;
}



void __stack_chk_fail(void)

{
                    // WARNING: Subroutine does not return
  __stack_chk_fail();
}



void gluPerspective(void)

{
  gluPerspective();
  return;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked

void exit(int __status)

{
                    // WARNING: Subroutine does not return
  exit(__status);
}



void glutInit(void)

{
  glutInit();
  return;
}



void glLoadIdentity(void)

{
  glLoadIdentity();
  return;
}



void glutMainLoop(void)

{
  glutMainLoop();
  return;
}



void glEnd(void)

{
  glEnd();
  return;
}



void glMatrixMode(void)

{
  glMatrixMode();
  return;
}



void glClearColor(void)

{
  glClearColor();
  return;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked

int puts(char *__s)

{
  int iVar1;
  
  iVar1 = puts(__s);
  return iVar1;
}



void glTranslatef(void)

{
  glTranslatef();
  return;
}



void glutInitWindowSize(void)

{
  glutInitWindowSize();
  return;
}



void glPushMatrix(void)

{
  glPushMatrix();
  return;
}



void glutTimerFunc(void)

{
  glutTimerFunc();
  return;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked

double pow(double __x,double __y)

{
  double dVar1;
  
  dVar1 = pow(__x,__y);
  return dVar1;
}



void glutCreateWindow(void)

{
  glutCreateWindow();
  return;
}



void _Unwind_Resume(void)

{
                    // WARNING: Subroutine does not return
  _Unwind_Resume();
}



void glLineWidth(void)

{
  glLineWidth();
  return;
}



void glutDisplayFunc(void)

{
  glutDisplayFunc();
  return;
}



void glPopMatrix(void)

{
  glPopMatrix();
  return;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked

double cos(double __x)

{
  double dVar1;
  
  dVar1 = cos(__x);
  return dVar1;
}



void glColor3f(void)

{
  glColor3f();
  return;
}



void glVertex3f(void)

{
  glVertex3f();
  return;
}



void processEntry _start(undefined8 param_1,undefined8 param_2)

{
  undefined1 auStack_8 [8];
  
  __libc_start_main(main,param_2,&stack0x00000008,0,0,param_1,auStack_8);
  do {
                    // WARNING: Do nothing block with infinite loop
  } while( true );
}



// WARNING: Removing unreachable block (ram,0x001026a3)
// WARNING: Removing unreachable block (ram,0x001026af)

void deregister_tm_clones(void)

{
  return;
}



// WARNING: Removing unreachable block (ram,0x001026e4)
// WARNING: Removing unreachable block (ram,0x001026f0)

void register_tm_clones(void)

{
  return;
}



void __do_global_dtors_aux(void)

{
  if (completed_0 != '\0') {
    return;
  }
  __cxa_finalize(__dso_handle);
  deregister_tm_clones();
  completed_0 = 1;
  return;
}



void frame_dummy(void)

{
  register_tm_clones();
  return;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked
// draw_cube_walls()

void draw_cube_walls(void)

{
  glColor3f(0x3f000000,0x3f000000);
  glBegin(7);
  glVertex3f(0xc2c80000,0xc2c80000);
  glVertex3f(0x42c80000,0xc2c80000);
  glVertex3f(0x42c80000,0x42c80000);
  glVertex3f(0xc2c80000,0x42c80000);
  glEnd();
  glColor3f(0x3f4ccccd,0x3e99999a);
  glBegin(7);
  glVertex3f(0xc2c80000,0xc2c80000,0);
  glVertex3f(0xc2c80000,0xc2c80000);
  glVertex3f(0x42c80000,0xc2c80000);
  glVertex3f(0x42c80000,0xc2c80000,0);
  glEnd();
  glColor3f(0x3e99999a,0x3f4ccccd);
  glBegin(7);
  glVertex3f(0xc2c80000,0x42c80000,0);
  glVertex3f(0xc2c80000,0x42c80000);
  glVertex3f(0x42c80000,0x42c80000);
  glVertex3f(0x42c80000,0x42c80000,0);
  glEnd();
  glColor3f(0x3f4ccccd,0x3f4ccccd);
  glBegin(7);
  glVertex3f(0xc2c80000,0xc2c80000,0);
  glVertex3f(0xc2c80000,0x42c80000,0);
  glVertex3f(0xc2c80000,0x42c80000);
  glVertex3f(0xc2c80000,0xc2c80000);
  glEnd();
  glColor3f(0x3e99999a,0x3f4ccccd);
  glBegin(7);
  glVertex3f(0x42c80000,0xc2c80000,0);
  glVertex3f(0x42c80000,0x42c80000,0);
  glVertex3f(0x42c80000,0x42c80000);
  glVertex3f(0x42c80000,0xc2c80000);
  glEnd();
  return;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked
// draw_checkered_floor()

void draw_checkered_floor(void)

{
  float fVar1;
  undefined4 local_44;
  undefined4 local_40;
  
  for (local_44 = 0; local_44 < 0x14; local_44 = local_44 + 1) {
    for (local_40 = 0; local_40 < 0x14; local_40 = local_40 + 1) {
      fVar1 = (float)local_44 * 10.0 - 100.0;
      if ((local_40 + local_44 & 1U) == 0) {
        glColor3f(0x3f666666);
      }
      else {
        glColor3f(0x3e4ccccd);
      }
      glBegin(7);
      glVertex3f(fVar1);
      glVertex3f(fVar1 + 10.0);
      glVertex3f(fVar1 + 10.0);
      glVertex3f(fVar1);
      glEnd();
    }
  }
  return;
}



// draw_arrow(Point3D const&, Vector const&, double)

void draw_arrow(Point3D *param_1,Vector *param_2,double param_3)

{
  long in_FS_OFFSET;
  double dVar1;
  double local_178;
  undefined8 local_170;
  undefined8 local_168;
  double local_150;
  Vector *local_148;
  Point3D *local_140;
  double local_130;
  double local_128 [4];
  double local_108 [4];
  double local_e8;
  undefined8 local_e0;
  undefined8 local_d8;
  double local_a8 [4];
  double local_88 [4];
  Vector local_68 [32];
  Point3D local_48 [32];
  Vector local_28 [24];
  long local_10;
  
  local_10 = *(long *)(in_FS_OFFSET + 0x28);
  local_150 = param_3;
  local_148 = param_2;
  local_140 = param_1;
  Vector::normalize();
  Vector::operator*(local_28,local_128);
  Point3D::operator+((Point3D *)local_108,(Vector *)local_140);
  glLineWidth(0x40400000);
  glColor3f(0x3f800000);
  glBegin(1);
  glVertex3f((float)*(double *)local_140);
  glVertex3f((float)local_108[0]);
  glEnd();
  glLineWidth(0x3f800000);
  glColor3f(0x3f800000);
  local_130 = local_150 * 0.1;
  Vector::Vector(local_28,0.0,0.0,1.0);
  Vector::cross((Vector *)&local_e8);
  dVar1 = (double)Vector::norm((Vector *)&local_e8);
  if (dVar1 < 0.1) {
    Vector::Vector(local_28,0.0,1.0,0.0);
    Vector::cross((Vector *)&local_178);
    local_e8 = local_178;
    local_e0 = local_170;
    local_d8 = local_168;
  }
  Vector::normalize();
  local_e8 = local_178;
  local_e0 = local_170;
  local_d8 = local_168;
  Vector::cross(local_28);
  Vector::normalize();
  Vector::operator*(local_28,&local_e8);
  Vector::operator*(local_68,local_128);
  Point3D::operator-(local_48,(Vector *)local_108);
  Point3D::operator+((Point3D *)local_a8,(Vector *)local_48);
  Vector::operator*(local_28,&local_e8);
  Vector::operator*(local_68,local_128);
  Point3D::operator-(local_48,(Vector *)local_108);
  Point3D::operator-((Point3D *)local_88,(Vector *)local_48);
  glBegin(4);
  glVertex3f((float)local_108[0]);
  glVertex3f((float)local_a8[0]);
  glVertex3f((float)local_88[0]);
  glEnd();
  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {
                    // WARNING: Subroutine does not return
    __stack_chk_fail();
  }
  return;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked
// draw_axes()

void draw_axes(void)

{
  long in_FS_OFFSET;
  Point3D local_48 [32];
  Point3D local_28 [24];
  long local_10;
  
  local_10 = *(long *)(in_FS_OFFSET + 0x28);
  glLineWidth(0x40400000);
  glColor3f(0x3f800000,0);
  Point3D::Point3D(local_28,50.0,0.0,0.0);
  Point3D::Point3D(local_48,0.0,0.0,0.0);
  draw_line(local_48,local_28);
  glColor3f(0);
  Point3D::Point3D(local_28,0.0,50.0,0.0);
  Point3D::Point3D(local_48,0.0,0.0,0.0);
  draw_line(local_48,local_28);
  glColor3f(0,0);
  Point3D::Point3D(local_28,0.0,0.0,50.0);
  Point3D::Point3D(local_48,0.0,0.0,0.0);
  draw_line(local_48,local_28);
  glLineWidth(0x3f800000);
  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {
                    // WARNING: Subroutine does not return
    __stack_chk_fail();
  }
  return;
}



// draw_line(Point3D const&, Point3D const&)

void draw_line(Point3D *param_1,Point3D *param_2)

{
  glBegin(1);
  glVertex3f((float)*(double *)param_1);
  glVertex3f((float)*(double *)param_2);
  glEnd();
  return;
}



// draw_triangle(Point3D const&, Point3D const&, Point3D const&)

void draw_triangle(Point3D *param_1,Point3D *param_2,Point3D *param_3)

{
  glBegin(4);
  glVertex3f((float)*(double *)param_1);
  glVertex3f((float)*(double *)param_2);
  glVertex3f((float)*(double *)param_3);
  glEnd();
  return;
}



// draw_sphere(double, int, int, std::vector<Point3D, std::allocator<Point3D> > const&)

void draw_sphere(double param_1,int param_2,int param_3,vector *param_4)

{
  bool bVar1;
  undefined4 uVar2;
  int iVar3;
  int iVar4;
  Point3D *pPVar5;
  Point3D *pPVar6;
  Point3D *pPVar7;
  undefined1 auVar8 [16];
  undefined1 auVar9 [16];
  int local_58;
  int local_54;
  
  for (local_58 = 0; local_58 < param_2; local_58 = local_58 + 1) {
    iVar3 = local_58 * (param_3 + 1);
    iVar4 = param_3 + iVar3 + 1;
    bVar1 = local_58 < param_2 / 2;
    for (local_54 = 0; local_54 < param_3; local_54 = local_54 + 1) {
      auVar9._4_12_ = SUB1612((undefined1  [16])0x0,4);
      auVar9._0_4_ = 0x3e6147ae;
      uVar2 = 0x3e6147ae;
      if (!bVar1) {
        uVar2 = 0x3f800000;
      }
      auVar8._4_12_ = SUB1612((undefined1  [16])0x0,4);
      auVar8._0_4_ = uVar2;
      uVar2 = 0x3f800000;
      if (!bVar1) {
        uVar2 = 0;
      }
      glColor3f(uVar2,auVar8._0_8_,auVar9._0_8_);
      if (local_58 != 0) {
        pPVar5 = (Point3D *)
                 std::vector<Point3D,std::allocator<Point3D>>::operator[]
                           ((vector<Point3D,std::allocator<Point3D>> *)param_4,
                            (long)(local_54 + iVar3 + 1));
        pPVar6 = (Point3D *)
                 std::vector<Point3D,std::allocator<Point3D>>::operator[]
                           ((vector<Point3D,std::allocator<Point3D>> *)param_4,
                            (long)(local_54 + iVar4));
        pPVar7 = (Point3D *)
                 std::vector<Point3D,std::allocator<Point3D>>::operator[]
                           ((vector<Point3D,std::allocator<Point3D>> *)param_4,
                            (long)(local_54 + iVar3));
        draw_triangle(pPVar7,pPVar6,pPVar5);
      }
      if (local_58 != param_2 + -1) {
        pPVar5 = (Point3D *)
                 std::vector<Point3D,std::allocator<Point3D>>::operator[]
                           ((vector<Point3D,std::allocator<Point3D>> *)param_4,
                            (long)(local_54 + param_3 + iVar3 + 2));
        pPVar6 = (Point3D *)
                 std::vector<Point3D,std::allocator<Point3D>>::operator[]
                           ((vector<Point3D,std::allocator<Point3D>> *)param_4,
                            (long)(local_54 + iVar4));
        pPVar7 = (Point3D *)
                 std::vector<Point3D,std::allocator<Point3D>>::operator[]
                           ((vector<Point3D,std::allocator<Point3D>> *)param_4,
                            (long)(local_54 + iVar3 + 1));
        draw_triangle(pPVar7,pPVar6,pPVar5);
      }
      pPVar5 = (Point3D *)
               std::vector<Point3D,std::allocator<Point3D>>::operator[]
                         ((vector<Point3D,std::allocator<Point3D>> *)param_4,
                          (long)(iVar4 + local_54));
      pPVar6 = (Point3D *)
               std::vector<Point3D,std::allocator<Point3D>>::operator[]
                         ((vector<Point3D,std::allocator<Point3D>> *)param_4,
                          (long)(iVar3 + local_54));
      draw_line(pPVar6,pPVar5);
      if (local_58 != 0) {
        pPVar5 = (Point3D *)
                 std::vector<Point3D,std::allocator<Point3D>>::operator[]
                           ((vector<Point3D,std::allocator<Point3D>> *)param_4,
                            (long)(iVar3 + local_54 + 1));
        pPVar6 = (Point3D *)
                 std::vector<Point3D,std::allocator<Point3D>>::operator[]
                           ((vector<Point3D,std::allocator<Point3D>> *)param_4,
                            (long)(iVar3 + local_54));
        draw_line(pPVar6,pPVar5);
      }
      bVar1 = !bVar1;
    }
  }
  return;
}

void draw_sphere(double radius, int stacks, int slices, std::vector<Point3D>& vertices) {
  for (int i = 0; i < stacks; ++i) {
      int curr_row_start = i * (slices + 1);
      int next_row_start = (i + 1) * (slices + 1);

      // Alternate colors across rows for stripe effect (red and green)
      bool is_red_row = i < stacks / 2;

      for (int j = 0; j < slices; ++j) {
          // Alternate column stripe colors within each row
          bool is_red_stripe = ((j + is_red_row) % 2 == 0);

          if (is_red_stripe)
              glColor3f(1.0f, 0.0f, 0.0f);  // Red
          else
              glColor3f(0.0f, 1.0f, 0.0f);  // Green

          // Indices for triangle vertices
          int idx1 = curr_row_start + j;
          int idx2 = next_row_start + j;
          int idx3 = curr_row_start + j + 1;
          int idx4 = next_row_start + j + 1;

          // Draw upper triangle (except for bottom-most stack)
          if (i != 0)
              draw_triangle(&vertices[idx1], &vertices[idx2], &vertices[idx3]);

          // Draw lower triangle (except for top-most stack)
          if (i != stacks - 1)
              draw_triangle(&vertices[idx3], &vertices[idx2], &vertices[idx4]);

          // Draw lines for wireframe look
          draw_line(&vertices[idx1], &vertices[idx2]);
          draw_line(&vertices[idx1], &vertices[idx3]);
      }
  }
}



// WARNING: Unknown calling convention -- yet parameter storage is locked
// init()

void init(void)

{
  time_t tVar1;
  
  glClearColor(0x3e4ccccd,0x3e4ccccd,0x3e4ccccd,0x3f800000);
  glMatrixMode(0x1701);
  glLoadIdentity();
  gluPerspective(0x4054000000000000,0x3ff0000000000000,0x3ff0000000000000,0x408f400000000000);
  tVar1 = time((time_t *)0x0);
  srand((uint)tVar1);
  return;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// WARNING: Unknown calling convention -- yet parameter storage is locked
// display()

void display(void)

{
  glEnable(0xb71);
  glClear(0x4100);
  glMatrixMode(0x1700);
  glLoadIdentity();
  gluLookAt(camera._16_8_,camera._24_8_,camera._32_8_,(double)camera._16_8_ + (double)camera._88_8_,
            (double)camera._24_8_ + (double)camera._96_8_,
            (double)camera._32_8_ + (double)camera._104_8_,camera._40_8_,camera._48_8_);
  draw_checkered_floor();
  draw_cube_walls();
  glPushMatrix();
  glTranslatef((float)ball);
  draw_sphere(DAT_0010c158,DAT_0010c164,DAT_0010c160,(vector *)&DAT_0010c170);
  glPopMatrix();
  if (show_velocity_arrow != '\0') {
    draw_arrow((Point3D *)&ball,(Vector *)&DAT_0010c140,DAT_0010c158 * 3.0);
  }
  glutSwapBuffers();
  return;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// handle_simulation(int)

void handle_simulation(int param_1)

{
  int iVar1;
  double dVar2;
  
  if (simulation_on == '\x01') {
    iVar1 = glutGet(700);
    dVar2 = (double)iVar1 / 1000.0 - _DAT_0010c168;
    _DAT_0010c168 = (double)iVar1 / 1000.0;
    Ball::update_physics(dVar2,-100.0,100.0,-100.0,100.0,0.0,100.0,9.8,0.7);
    glutPostRedisplay();
    glutTimerFunc(0x14,handle_simulation,0);
  }
  return;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked
// idle()

void idle(void)

{
  glutPostRedisplay();
  return;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// WARNING: Unknown calling convention -- yet parameter storage is locked
// reset_ball()

void reset_ball(void)

{
  int iVar1;
  long in_FS_OFFSET;
  double dVar2;
  double dVar3;
  double local_88;
  undefined8 local_80;
  undefined8 local_78;
  double local_68;
  double local_60;
  double local_58;
  double local_50;
  double local_48;
  double local_40;
  double local_38;
  double local_30;
  double local_28;
  undefined8 local_20;
  undefined8 local_18;
  long local_10;
  
  local_10 = *(long *)(in_FS_OFFSET + 0x28);
  dVar2 = DAT_0010c158 - 100.0;
  dVar3 = DAT_0010c158 + DAT_0010c158;
  iVar1 = rand();
  local_68 = ((double)iVar1 / 2147483647.0) * (200.0 - dVar3) + dVar2;
  dVar2 = DAT_0010c158 - 100.0;
  dVar3 = DAT_0010c158 + DAT_0010c158;
  iVar1 = rand();
  local_60 = ((double)iVar1 / 2147483647.0) * (200.0 - dVar3) + dVar2;
  local_58 = DAT_0010c158 + 0.0;
  Point3D::Point3D((Point3D *)&local_28,local_68,local_60,local_58);
  ball = local_28;
  _DAT_0010c0e8 = local_20;
  _DAT_0010c0f0 = local_18;
  iVar1 = rand();
  local_50 = ((double)iVar1 / 2147483647.0 + (double)iVar1 / 2147483647.0) * 3.141592653589793;
  iVar1 = rand();
  local_48 = (((double)iVar1 / 2147483647.0) * 3.141592653589793) / 2.0;
  dVar2 = cos(local_50);
  local_40 = sin(local_48);
  local_40 = local_40 * dVar2;
  dVar2 = sin(local_50);
  local_38 = sin(local_48);
  local_38 = local_38 * dVar2;
  local_30 = cos(local_48);
  Vector::Vector((Vector *)&local_28,local_40,local_38,local_30);
  Vector::normalize();
  local_28 = local_88;
  local_20 = local_80;
  local_18 = local_78;
  Vector::operator*((Vector *)&local_88,&local_28);
  _DAT_0010c140 = local_88;
  _DAT_0010c148 = local_80;
  _DAT_0010c150 = local_78;
  iVar1 = glutGet(700);
  _DAT_0010c168 = (double)iVar1 / 1000.0;
  printf("Reset ball with speed: %.2f\n",initial_speed);
  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {
                    // WARNING: Subroutine does not return
    __stack_chk_fail();
  }
  return;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked
// show_controls()

void show_controls(void)

{
  puts("--- 3D Bouncing Ball Controls ---");
  puts("Space: Toggle simulation on/off");
  puts("v: Toggle velocity arrow display");
  puts("+/-: Increase/decrease ball speed (when paused)");
  puts("r: Reset ball to random position (when paused)");
  puts("\n--- Camera Controls ---");
  puts("Arrow keys: Move camera left/right/forward/backward");
  puts("Page Up/Down: Move camera up/down");
  puts("w/s: Move camera up/down (keeping reference point)");
  puts("1/2: Look left/right");
  puts("3/4: Look up/down");
  puts("5/6: Tilt camera clockwise/counterclockwise");
  puts("F1: Show controls");
  puts("Esc: Exit");
  puts("---------------------------------");
  return;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// handle_keys(unsigned char, int, int)

void handle_keys(uchar param_1,int param_2,int param_3)

{
  int iVar1;
  long in_FS_OFFSET;
  double dVar2;
  undefined8 local_58;
  undefined8 local_50;
  undefined8 local_48;
  int local_34;
  int local_30;
  uchar local_2c;
  double local_28 [3];
  long local_10;
  
  local_10 = *(long *)(in_FS_OFFSET + 0x28);
  local_34 = param_3;
  local_30 = param_2;
  local_2c = param_1;
  switch(param_1) {
  case '\x1b':
                    // WARNING: Subroutine does not return
    exit(0);
  default:
    puts("Unknown key pressed");
    break;
  case ' ':
    simulation_on = simulation_on ^ 1;
    if (simulation_on != 0) {
      new_run = '\0';
      iVar1 = glutGet(700);
      _DAT_0010c168 = (double)iVar1 / 1000.0;
      glutTimerFunc(0x14,handle_simulation,0);
    }
    break;
  case '+':
    if (((simulation_on != 1) && (new_run != '\0')) && (initial_speed < 500.0)) {
      initial_speed = initial_speed + 1.0;
      dVar2 = (double)Vector::norm((Vector *)&DAT_0010c140);
      if (0.0 < dVar2) {
        Vector::normalize();
        Vector::operator*((Vector *)&local_58,local_28);
        _DAT_0010c140 = local_58;
        _DAT_0010c148 = local_50;
        _DAT_0010c150 = local_48;
      }
      printf("Initial speed increased to: %.2f\n",initial_speed);
    }
    break;
  case '-':
    if (((simulation_on != 1) && (new_run != '\0')) && (1.0 < initial_speed)) {
      initial_speed = initial_speed - 1.0;
      dVar2 = (double)Vector::norm((Vector *)&DAT_0010c140);
      if (0.0 < dVar2) {
        Vector::normalize();
        Vector::operator*((Vector *)&local_58,local_28);
        _DAT_0010c140 = local_58;
        _DAT_0010c148 = local_50;
        _DAT_0010c150 = local_48;
      }
      printf("Initial speed decreased to: %.2f\n",initial_speed);
    }
    break;
  case '1':
    Camera::look_left((Camera *)camera);
    break;
  case '2':
    Camera::look_right((Camera *)camera);
    break;
  case '3':
    Camera::look_up((Camera *)camera);
    break;
  case '4':
    Camera::look_down((Camera *)camera);
    break;
  case '5':
    Camera::tilt_clockwise((Camera *)camera);
    break;
  case '6':
    Camera::tilt_counterclockwise((Camera *)camera);
    break;
  case 'R':
  case 'r':
    if (simulation_on != 1) {
      new_run = '\x01';
      reset_ball();
    }
    break;
  case 'S':
  case 's':
    Camera::move_down_same_ref((Camera *)camera);
    break;
  case 'V':
  case 'v':
    show_velocity_arrow = show_velocity_arrow ^ 1;
    break;
  case 'W':
  case 'w':
    Camera::move_up_same_ref((Camera *)camera);
  }
  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {
                    // WARNING: Subroutine does not return
    __stack_chk_fail();
  }
  return;
}



// handle_special_keys(int, int, int)

void handle_special_keys(int param_1,int param_2,int param_3)

{
  if (param_1 == 1) {
    show_controls();
    return;
  }
  if (((param_1 < 1) || (0x69 < param_1)) || (param_1 < 100)) {
switchD_0010422a_caseD_6:
    puts("Unknown special key pressed");
  }
  else {
    switch(param_1) {
    case 100:
      Camera::move_left((Camera *)camera);
      break;
    case 0x65:
      Camera::move_forward((Camera *)camera);
      break;
    case 0x66:
      Camera::move_right((Camera *)camera);
      break;
    case 0x67:
      Camera::move_backward((Camera *)camera);
      break;
    case 0x68:
      Camera::move_up((Camera *)camera);
      break;
    case 0x69:
      Camera::move_down((Camera *)camera);
      break;
    default:
      goto switchD_0010422a_caseD_6;
    }
  }
  return;
}



undefined8 main(undefined4 param_1,undefined8 param_2)

{
  undefined4 local_c;
  
  local_c = param_1;
  glutInit(&local_c,param_2);
  glutInitWindowSize(800,800);
  glutInitWindowPosition(100,100);
  glutInitDisplayMode(0x12);
  glutCreateWindow("Bouncing Ball");
  puts("--- 3D Bouncing Ball Controls ---");
  puts("Space: Toggle simulation on/off");
  puts("v: Toggle velocity arrow display");
  puts("+/-: Increase/decrease ball speed (when paused)");
  puts("r: Reset ball to random position (when paused)");
  puts("\n--- Camera Controls ---");
  puts("Arrow keys: Move camera left/right/forward/backward");
  puts("Page Up/Down: Move camera up/down");
  puts("w/s: Move camera up/down (keeping reference point)");
  puts("1/2: Look left/right");
  puts("3/4: Look up/down");
  puts("5/6: Tilt camera clockwise/counterclockwise");
  glutDisplayFunc(display);
  glutKeyboardFunc(handle_keys);
  glutSpecialFunc(handle_special_keys);
  glutIdleFunc(idle);
  init();
  reset_ball();
  glutMainLoop();
  return 0;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked
// __static_initialization_and_destruction_0()

void __static_initialization_and_destruction_0(void)

{
  long in_FS_OFFSET;
  Point3D local_68 [32];
  Point3D local_48 [32];
  Vector local_28 [24];
  long local_10;
  
  local_10 = *(long *)(in_FS_OFFSET + 0x28);
  Vector::Vector(local_28,0.0,0.0,1.0);
  Point3D::Point3D(local_48,0.0,0.0,0.0);
  Point3D::Point3D(local_68,150.0,150.0,150.0);
  Camera::Camera((Camera *)camera,local_68,local_48,local_28);
  Ball::Ball((Ball *)&ball,5.0,0x18,0x18);
  __cxa_atexit(Ball::~Ball,&ball,&__dso_handle);
  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {
                    // WARNING: Subroutine does not return
    __stack_chk_fail();
  }
  return;
}



void _GLOBAL__sub_I_camera(void)

{
  __static_initialization_and_destruction_0();
  return;
}



// std::vector<Point3D, std::allocator<Point3D> >::operator[](unsigned long) const

long __thiscall
std::vector<Point3D,std::allocator<Point3D>>::operator[]
          (vector<Point3D,std::allocator<Point3D>> *this,ulong param_1)

{
  return param_1 * 0x18 + *(long *)this;
}



// Ball::~Ball()

void __thiscall Ball::~Ball(Ball *this)

{
  std::vector<Point3D,std::allocator<Point3D>>::~vector
            ((vector<Point3D,std::allocator<Point3D>> *)(this + 0x90));
  return;
}



// std::vector<Point3D, std::allocator<Point3D> >::~vector()

void __thiscall
std::vector<Point3D,std::allocator<Point3D>>::~vector(vector<Point3D,std::allocator<Point3D>> *this)

{
  _Vector_base<Point3D,std::allocator<Point3D>>::_M_get_Tp_allocator
            ((_Vector_base<Point3D,std::allocator<Point3D>> *)this);
  _Destroy<Point3D*>(*(Point3D **)this,*(Point3D **)(this + 8));
  _Vector_base<Point3D,std::allocator<Point3D>>::~_Vector_base
            ((_Vector_base<Point3D,std::allocator<Point3D>> *)this);
  return;
}



// std::_Vector_base<Point3D, std::allocator<Point3D> >::_Vector_impl::~_Vector_impl()

void __thiscall
std::_Vector_base<Point3D,std::allocator<Point3D>>::_Vector_impl::~_Vector_impl(_Vector_impl *this)

{
  __new_allocator<Point3D>::~__new_allocator((__new_allocator<Point3D> *)this);
  return;
}



// std::_Vector_base<Point3D, std::allocator<Point3D> >::~_Vector_base()

void __thiscall
std::_Vector_base<Point3D,std::allocator<Point3D>>::~_Vector_base
          (_Vector_base<Point3D,std::allocator<Point3D>> *this)

{
  _M_deallocate(this,*(Point3D **)this,
                (*(long *)(this + 0x10) - *(long *)this >> 3) * -0x5555555555555555);
  _Vector_impl::~_Vector_impl((_Vector_impl *)this);
  return;
}



// std::_Vector_base<Point3D, std::allocator<Point3D> >::_M_get_Tp_allocator()

_Vector_base<Point3D,std::allocator<Point3D>> * __thiscall
std::_Vector_base<Point3D,std::allocator<Point3D>>::_M_get_Tp_allocator
          (_Vector_base<Point3D,std::allocator<Point3D>> *this)

{
  return this;
}



// std::_Vector_base<Point3D, std::allocator<Point3D> >::_M_deallocate(Point3D*, unsigned long)

void __thiscall
std::_Vector_base<Point3D,std::allocator<Point3D>>::_M_deallocate
          (_Vector_base<Point3D,std::allocator<Point3D>> *this,Point3D *param_1,ulong param_2)

{
  if (param_1 != (Point3D *)0x0) {
    __new_allocator<Point3D>::deallocate((__new_allocator<Point3D> *)this,param_1,param_2);
  }
  return;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked
// void std::_Destroy<Point3D*>(Point3D*, Point3D*)

void std::_Destroy<Point3D*>(Point3D *param_1,Point3D *param_2)

{
  _Destroy_aux<true>::__destroy<Point3D*>(param_1,param_2);
  return;
}



// std::__new_allocator<Point3D>::~__new_allocator()

void __thiscall std::__new_allocator<Point3D>::~__new_allocator(__new_allocator<Point3D> *this)

{
  return;
}



// void std::_Destroy_aux<true>::__destroy<Point3D*>(Point3D*, Point3D*)

void std::_Destroy_aux<true>::__destroy<Point3D*>(Point3D *param_1,Point3D *param_2)

{
  return;
}



// std::__new_allocator<Point3D>::deallocate(Point3D*, unsigned long)

void __thiscall
std::__new_allocator<Point3D>::deallocate
          (__new_allocator<Point3D> *this,Point3D *param_1,ulong param_2)

{
  operator_delete(param_1,param_2 * 0x18);
  return;
}



// Camera::Camera(Point3D const&, Point3D const&, Vector const&)

void __thiscall Camera::Camera(Camera *this,Point3D *param_1,Point3D *param_2,Vector *param_3)

{
  undefined8 uVar1;
  long in_FS_OFFSET;
  double dVar2;
  undefined8 local_78;
  undefined8 local_70;
  undefined8 local_68;
  Vector local_38 [24];
  long local_20;
  
  local_20 = *(long *)(in_FS_OFFSET + 0x28);
  *(undefined8 *)this = 0x4000000000000000;
  *(undefined8 *)(this + 8) = 0x3ff0000000000000;
  Point3D::Point3D((Point3D *)(this + 0x10),0.0,0.0,0.0);
  Vector::Vector((Vector *)(this + 0x28),0.0,0.0,0.0);
  Vector::Vector((Vector *)(this + 0x40),0.0,0.0,0.0);
  Vector::Vector((Vector *)(this + 0x58),0.0,0.0,0.0);
  uVar1 = *(undefined8 *)(param_1 + 8);
  *(undefined8 *)(this + 0x10) = *(undefined8 *)param_1;
  *(undefined8 *)(this + 0x18) = uVar1;
  *(undefined8 *)(this + 0x20) = *(undefined8 *)(param_1 + 0x10);
  Vector::Vector(local_38,*(double *)param_2 - *(double *)param_1,
                 *(double *)(param_2 + 8) - *(double *)(param_1 + 8),
                 *(double *)(param_2 + 0x10) - *(double *)(param_1 + 0x10));
  Vector::normalize();
  *(undefined8 *)(this + 0x58) = local_78;
  *(undefined8 *)(this + 0x60) = local_70;
  *(undefined8 *)(this + 0x68) = local_68;
  dVar2 = (double)Vector::dot((Vector *)(this + 0x58),param_3);
  if (1e-06 <= ABS(dVar2)) {
    *(undefined8 *)(this + 0x40) = *(undefined8 *)(this + 0x60);
    *(ulong *)(this + 0x48) = *(ulong *)(this + 0x58) ^ 0x8000000000000000;
    *(undefined8 *)(this + 0x50) = 0;
    Vector::normalize();
    *(undefined8 *)(this + 0x40) = local_78;
    *(undefined8 *)(this + 0x48) = local_70;
    *(undefined8 *)(this + 0x50) = local_68;
    Vector::cross(local_38);
    Vector::normalize();
    *(undefined8 *)(this + 0x28) = local_78;
    *(undefined8 *)(this + 0x30) = local_70;
    *(undefined8 *)(this + 0x38) = local_68;
  }
  else {
    Vector::normalize();
    *(undefined8 *)(this + 0x28) = local_78;
    *(undefined8 *)(this + 0x30) = local_70;
    *(undefined8 *)(this + 0x38) = local_68;
    Vector::cross(local_38);
    Vector::normalize();
    *(undefined8 *)(this + 0x40) = local_78;
    *(undefined8 *)(this + 0x48) = local_70;
    *(undefined8 *)(this + 0x50) = local_68;
  }
  if (local_20 != *(long *)(in_FS_OFFSET + 0x28)) {
                    // WARNING: Subroutine does not return
    __stack_chk_fail();
  }
  return;
}



// Camera::move_forward()

void __thiscall Camera::move_forward(Camera *this)

{
  long in_FS_OFFSET;
  double local_48 [4];
  Point3D local_28 [24];
  long local_10;
  
  local_10 = *(long *)(in_FS_OFFSET + 0x28);
  operator*(local_48,(Vector *)this);
  Point3D::operator+=(local_28,(Vector *)(this + 0x10));
  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {
                    // WARNING: Subroutine does not return
    __stack_chk_fail();
  }
  return;
}



// Camera::move_backward()

void __thiscall Camera::move_backward(Camera *this)

{
  long in_FS_OFFSET;
  double local_48 [4];
  Point3D local_28 [24];
  long local_10;
  
  local_10 = *(long *)(in_FS_OFFSET + 0x28);
  operator*(local_48,(Vector *)this);
  Point3D::operator-=(local_28,(Vector *)(this + 0x10));
  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {
                    // WARNING: Subroutine does not return
    __stack_chk_fail();
  }
  return;
}



// Camera::move_left()

void __thiscall Camera::move_left(Camera *this)

{
  long in_FS_OFFSET;
  double local_48 [4];
  Point3D local_28 [24];
  long local_10;
  
  local_10 = *(long *)(in_FS_OFFSET + 0x28);
  operator*(local_48,(Vector *)this);
  Point3D::operator-=(local_28,(Vector *)(this + 0x10));
  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {
                    // WARNING: Subroutine does not return
    __stack_chk_fail();
  }
  return;
}



// Camera::move_right()

void __thiscall Camera::move_right(Camera *this)

{
  long in_FS_OFFSET;
  double local_48 [4];
  Point3D local_28 [24];
  long local_10;
  
  local_10 = *(long *)(in_FS_OFFSET + 0x28);
  operator*(local_48,(Vector *)this);
  Point3D::operator+=(local_28,(Vector *)(this + 0x10));
  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {
                    // WARNING: Subroutine does not return
    __stack_chk_fail();
  }
  return;
}



// Camera::move_up()

void __thiscall Camera::move_up(Camera *this)

{
  long in_FS_OFFSET;
  double local_48 [4];
  Point3D local_28 [24];
  long local_10;
  
  local_10 = *(long *)(in_FS_OFFSET + 0x28);
  operator*(local_48,(Vector *)this);
  Point3D::operator+=(local_28,(Vector *)(this + 0x10));
  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {
                    // WARNING: Subroutine does not return
    __stack_chk_fail();
  }
  return;
}



// Camera::move_down()

void __thiscall Camera::move_down(Camera *this)

{
  long in_FS_OFFSET;
  double local_48 [4];
  Point3D local_28 [24];
  long local_10;
  
  local_10 = *(long *)(in_FS_OFFSET + 0x28);
  operator*(local_48,(Vector *)this);
  Point3D::operator-=(local_28,(Vector *)(this + 0x10));
  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {
                    // WARNING: Subroutine does not return
    __stack_chk_fail();
  }
  return;
}



// Camera::look_left()

void __thiscall Camera::look_left(Camera *this)

{
  Camera *pCVar1;
  long in_FS_OFFSET;
  undefined8 local_58;
  undefined8 local_50;
  undefined8 local_48;
  Camera *local_30;
  long local_20;
  
  local_20 = *(long *)(in_FS_OFFSET + 0x28);
  local_30 = this;
  Vector::rotate((Vector *)&local_58,(Vector *)(this + 0x58),*(double *)(this + 8));
  pCVar1 = local_30;
  *(undefined8 *)(this + 0x58) = local_58;
  *(undefined8 *)(this + 0x60) = local_50;
  *(undefined8 *)(this + 0x68) = local_48;
  Vector::rotate((Vector *)&local_58,(Vector *)(local_30 + 0x40),*(double *)(local_30 + 8));
  *(undefined8 *)(pCVar1 + 0x40) = local_58;
  *(undefined8 *)(pCVar1 + 0x48) = local_50;
  *(undefined8 *)(pCVar1 + 0x50) = local_48;
  if (local_20 != *(long *)(in_FS_OFFSET + 0x28)) {
                    // WARNING: Subroutine does not return
    __stack_chk_fail();
  }
  return;
}



// Camera::look_right()

void __thiscall Camera::look_right(Camera *this)

{
  Camera *pCVar1;
  long in_FS_OFFSET;
  undefined8 local_58;
  undefined8 local_50;
  undefined8 local_48;
  Camera *local_30;
  long local_20;
  
  local_20 = *(long *)(in_FS_OFFSET + 0x28);
  local_30 = this;
  Vector::rotate((Vector *)&local_58,(Vector *)(this + 0x58),-*(double *)(this + 8));
  pCVar1 = local_30;
  *(undefined8 *)(this + 0x58) = local_58;
  *(undefined8 *)(this + 0x60) = local_50;
  *(undefined8 *)(this + 0x68) = local_48;
  Vector::rotate((Vector *)&local_58,(Vector *)(local_30 + 0x40),-*(double *)(local_30 + 8));
  *(undefined8 *)(pCVar1 + 0x40) = local_58;
  *(undefined8 *)(pCVar1 + 0x48) = local_50;
  *(undefined8 *)(pCVar1 + 0x50) = local_48;
  if (local_20 != *(long *)(in_FS_OFFSET + 0x28)) {
                    // WARNING: Subroutine does not return
    __stack_chk_fail();
  }
  return;
}



// Camera::look_up()

void __thiscall Camera::look_up(Camera *this)

{
  Camera *pCVar1;
  long in_FS_OFFSET;
  undefined8 local_58;
  undefined8 local_50;
  undefined8 local_48;
  Camera *local_30;
  long local_20;
  
  local_20 = *(long *)(in_FS_OFFSET + 0x28);
  local_30 = this;
  Vector::rotate((Vector *)&local_58,(Vector *)(this + 0x58),*(double *)(this + 8));
  pCVar1 = local_30;
  *(undefined8 *)(this + 0x58) = local_58;
  *(undefined8 *)(this + 0x60) = local_50;
  *(undefined8 *)(this + 0x68) = local_48;
  Vector::rotate((Vector *)&local_58,(Vector *)(local_30 + 0x28),*(double *)(local_30 + 8));
  *(undefined8 *)(pCVar1 + 0x28) = local_58;
  *(undefined8 *)(pCVar1 + 0x30) = local_50;
  *(undefined8 *)(pCVar1 + 0x38) = local_48;
  if (local_20 != *(long *)(in_FS_OFFSET + 0x28)) {
                    // WARNING: Subroutine does not return
    __stack_chk_fail();
  }
  return;
}



// Camera::look_down()

void __thiscall Camera::look_down(Camera *this)

{
  Camera *pCVar1;
  long in_FS_OFFSET;
  undefined8 local_58;
  undefined8 local_50;
  undefined8 local_48;
  Camera *local_30;
  long local_20;
  
  local_20 = *(long *)(in_FS_OFFSET + 0x28);
  local_30 = this;
  Vector::rotate((Vector *)&local_58,(Vector *)(this + 0x58),-*(double *)(this + 8));
  pCVar1 = local_30;
  *(undefined8 *)(this + 0x58) = local_58;
  *(undefined8 *)(this + 0x60) = local_50;
  *(undefined8 *)(this + 0x68) = local_48;
  Vector::rotate((Vector *)&local_58,(Vector *)(local_30 + 0x28),-*(double *)(local_30 + 8));
  *(undefined8 *)(pCVar1 + 0x28) = local_58;
  *(undefined8 *)(pCVar1 + 0x30) = local_50;
  *(undefined8 *)(pCVar1 + 0x38) = local_48;
  if (local_20 != *(long *)(in_FS_OFFSET + 0x28)) {
                    // WARNING: Subroutine does not return
    __stack_chk_fail();
  }
  return;
}



// Camera::tilt_clockwise()

void __thiscall Camera::tilt_clockwise(Camera *this)

{
  Camera *pCVar1;
  long in_FS_OFFSET;
  undefined8 local_58;
  undefined8 local_50;
  undefined8 local_48;
  Camera *local_30;
  long local_20;
  
  local_20 = *(long *)(in_FS_OFFSET + 0x28);
  local_30 = this;
  Vector::rotate((Vector *)&local_58,(Vector *)(this + 0x40),*(double *)(this + 8));
  pCVar1 = local_30;
  *(undefined8 *)(this + 0x40) = local_58;
  *(undefined8 *)(this + 0x48) = local_50;
  *(undefined8 *)(this + 0x50) = local_48;
  Vector::rotate((Vector *)&local_58,(Vector *)(local_30 + 0x28),*(double *)(local_30 + 8));
  *(undefined8 *)(pCVar1 + 0x28) = local_58;
  *(undefined8 *)(pCVar1 + 0x30) = local_50;
  *(undefined8 *)(pCVar1 + 0x38) = local_48;
  if (local_20 != *(long *)(in_FS_OFFSET + 0x28)) {
                    // WARNING: Subroutine does not return
    __stack_chk_fail();
  }
  return;
}



// Camera::tilt_counterclockwise()

void __thiscall Camera::tilt_counterclockwise(Camera *this)

{
  Camera *pCVar1;
  long in_FS_OFFSET;
  undefined8 local_58;
  undefined8 local_50;
  undefined8 local_48;
  Camera *local_30;
  long local_20;
  
  local_20 = *(long *)(in_FS_OFFSET + 0x28);
  local_30 = this;
  Vector::rotate((Vector *)&local_58,(Vector *)(this + 0x40),-*(double *)(this + 8));
  pCVar1 = local_30;
  *(undefined8 *)(this + 0x40) = local_58;
  *(undefined8 *)(this + 0x48) = local_50;
  *(undefined8 *)(this + 0x50) = local_48;
  Vector::rotate((Vector *)&local_58,(Vector *)(local_30 + 0x28),-*(double *)(local_30 + 8));
  *(undefined8 *)(pCVar1 + 0x28) = local_58;
  *(undefined8 *)(pCVar1 + 0x30) = local_50;
  *(undefined8 *)(pCVar1 + 0x38) = local_48;
  if (local_20 != *(long *)(in_FS_OFFSET + 0x28)) {
                    // WARNING: Subroutine does not return
    __stack_chk_fail();
  }
  return;
}



// Camera::move_up_same_ref()

void __thiscall Camera::move_up_same_ref(Camera *this)

{
  Point3D *this_00;
  Camera *pCVar1;
  Camera *pCVar2;
  long in_FS_OFFSET;
  double dVar3;
  double local_88;
  double local_80;
  double local_78;
  Camera *local_60;
  double local_50;
  double local_48;
  double local_40;
  Point3D local_38 [24];
  long local_20;
  
  local_20 = *(long *)(in_FS_OFFSET + 0x28);
  local_60 = this;
  Point3D::Point3D(local_38,0.0,0.0,0.0);
  local_50 = (double)Point3D::distance((Point3D *)(this + 0x10),local_38);
  *(double *)(local_60 + 0x20) = *(double *)local_60 + *(double *)(local_60 + 0x20);
  this_00 = (Point3D *)(local_60 + 0x10);
  Point3D::Point3D(local_38,0.0,0.0,0.0);
  local_48 = (double)Point3D::distance(this_00,local_38);
  dVar3 = acos(((local_48 * local_48 + local_50 * local_50) -
               *(double *)local_60 * *(double *)local_60) / ((local_50 + local_50) * local_48));
  pCVar1 = local_60;
  local_40 = (dVar3 * 180.0) / 3.141592653589793;
  Vector::rotate((Vector *)&local_88,(Vector *)(local_60 + 0x58),-local_40);
  pCVar2 = local_60;
  *(double *)(pCVar1 + 0x58) = local_88;
  *(double *)(pCVar1 + 0x60) = local_80;
  *(double *)(pCVar1 + 0x68) = local_78;
  Vector::rotate((Vector *)&local_88,(Vector *)(local_60 + 0x28),-local_40);
  *(double *)(pCVar2 + 0x28) = local_88;
  *(double *)(pCVar2 + 0x30) = local_80;
  *(double *)(pCVar2 + 0x38) = local_78;
  Vector::cross((Vector *)local_38);
  pCVar1 = local_60;
  Vector::normalize();
  *(double *)(pCVar1 + 0x40) = local_88;
  *(double *)(pCVar1 + 0x48) = local_80;
  *(double *)(pCVar1 + 0x50) = local_78;
  if (local_20 != *(long *)(in_FS_OFFSET + 0x28)) {
                    // WARNING: Subroutine does not return
    __stack_chk_fail();
  }
  return;
}



// Camera::move_down_same_ref()

void __thiscall Camera::move_down_same_ref(Camera *this)

{
  Point3D *this_00;
  Camera *pCVar1;
  Camera *pCVar2;
  long in_FS_OFFSET;
  double dVar3;
  double local_88;
  double local_80;
  double local_78;
  Camera *local_60;
  double local_50;
  double local_48;
  double local_40;
  Point3D local_38 [24];
  long local_20;
  
  local_20 = *(long *)(in_FS_OFFSET + 0x28);
  local_60 = this;
  Point3D::Point3D(local_38,0.0,0.0,0.0);
  local_50 = (double)Point3D::distance((Point3D *)(this + 0x10),local_38);
  *(double *)(local_60 + 0x20) = *(double *)(local_60 + 0x20) - *(double *)local_60;
  this_00 = (Point3D *)(local_60 + 0x10);
  Point3D::Point3D(local_38,0.0,0.0,0.0);
  local_48 = (double)Point3D::distance(this_00,local_38);
  dVar3 = acos(((local_48 * local_48 + local_50 * local_50) -
               *(double *)local_60 * *(double *)local_60) / ((local_50 + local_50) * local_48));
  pCVar1 = local_60;
  local_40 = (dVar3 * 180.0) / 3.141592653589793;
  Vector::rotate((Vector *)&local_88,(Vector *)(local_60 + 0x58),local_40);
  pCVar2 = local_60;
  *(double *)(pCVar1 + 0x58) = local_88;
  *(double *)(pCVar1 + 0x60) = local_80;
  *(double *)(pCVar1 + 0x68) = local_78;
  Vector::rotate((Vector *)&local_88,(Vector *)(local_60 + 0x28),local_40);
  *(double *)(pCVar2 + 0x28) = local_88;
  *(double *)(pCVar2 + 0x30) = local_80;
  *(double *)(pCVar2 + 0x38) = local_78;
  Vector::cross((Vector *)local_38);
  pCVar1 = local_60;
  Vector::normalize();
  *(double *)(pCVar1 + 0x40) = local_88;
  *(double *)(pCVar1 + 0x48) = local_80;
  *(double *)(pCVar1 + 0x50) = local_78;
  if (local_20 != *(long *)(in_FS_OFFSET + 0x28)) {
                    // WARNING: Subroutine does not return
    __stack_chk_fail();
  }
  return;
}



// Vector::Vector(double, double, double)

void __thiscall Vector::Vector(Vector *this,double param_1,double param_2,double param_3)

{
  *(double *)this = param_1;
  *(double *)(this + 8) = param_2;
  *(double *)(this + 0x10) = param_3;
  return;
}



// Vector::TEMPNAMEPLACEHOLDERVALUE(Vector const&) const

Vector * __thiscall Vector::operator+(Vector *this,Vector *param_1)

{
  double *in_RDX;
  
  Vector(this,*(double *)param_1 + *in_RDX,*(double *)(param_1 + 8) + in_RDX[1],
         *(double *)(param_1 + 0x10) + in_RDX[2]);
  return this;
}



// Vector::TEMPNAMEPLACEHOLDERVALUE(Vector const&) const

Vector * __thiscall Vector::operator-(Vector *this,Vector *param_1)

{
  double *in_RDX;
  
  Vector(this,*(double *)param_1 - *in_RDX,*(double *)(param_1 + 8) - in_RDX[1],
         *(double *)(param_1 + 0x10) - in_RDX[2]);
  return this;
}



// Vector::TEMPNAMEPLACEHOLDERVALUE(double const&) const

Vector * __thiscall Vector::operator*(Vector *this,double *param_1)

{
  double *in_RDX;
  
  Vector(this,*param_1 * *in_RDX,param_1[1] * *in_RDX,param_1[2] * *in_RDX);
  return this;
}



// TEMPNAMEPLACEHOLDERVALUE(double const&, Vector const&)

double * operator*(double *param_1,Vector *param_2)

{
  double *in_RDX;
  
  Vector::Vector((Vector *)param_1,*in_RDX * *(double *)param_2,in_RDX[1] * *(double *)param_2,
                 in_RDX[2] * *(double *)param_2);
  return param_1;
}



// Vector::TEMPNAMEPLACEHOLDERVALUE(double const&) const

Vector * __thiscall Vector::operator/(Vector *this,double *param_1)

{
  double *in_RDX;
  
  if (*in_RDX != 0.0) {
    Vector(this,*param_1 / *in_RDX,param_1[1] / *in_RDX,param_1[2] / *in_RDX);
    return this;
  }
                    // WARNING: Subroutine does not return
  __assert_fail("d != 0","vector.cpp",0x21,"Vector Vector::operator/(const double&) const");
}



// Vector::TEMPNAMEPLACEHOLDERVALUE(Vector const&)

Vector * __thiscall Vector::operator+=(Vector *this,Vector *param_1)

{
  undefined8 uVar1;
  double *in_RDX;
  
  *(double *)param_1 = *in_RDX + *(double *)param_1;
  *(double *)(param_1 + 8) = in_RDX[1] + *(double *)(param_1 + 8);
  *(double *)(param_1 + 0x10) = in_RDX[2] + *(double *)(param_1 + 0x10);
  uVar1 = *(undefined8 *)(param_1 + 8);
  *(undefined8 *)this = *(undefined8 *)param_1;
  *(undefined8 *)(this + 8) = uVar1;
  *(undefined8 *)(this + 0x10) = *(undefined8 *)(param_1 + 0x10);
  return this;
}



// Vector::TEMPNAMEPLACEHOLDERVALUE(Vector const&)

Vector * __thiscall Vector::operator-=(Vector *this,Vector *param_1)

{
  undefined8 uVar1;
  double *in_RDX;
  
  *(double *)param_1 = *(double *)param_1 - *in_RDX;
  *(double *)(param_1 + 8) = *(double *)(param_1 + 8) - in_RDX[1];
  *(double *)(param_1 + 0x10) = *(double *)(param_1 + 0x10) - in_RDX[2];
  uVar1 = *(undefined8 *)(param_1 + 8);
  *(undefined8 *)this = *(undefined8 *)param_1;
  *(undefined8 *)(this + 8) = uVar1;
  *(undefined8 *)(this + 0x10) = *(undefined8 *)(param_1 + 0x10);
  return this;
}



// Vector::dot(Vector const&) const

double __thiscall Vector::dot(Vector *this,Vector *param_1)

{
  return *(double *)(param_1 + 0x10) * *(double *)(this + 0x10) +
         *(double *)this * *(double *)param_1 + *(double *)(param_1 + 8) * *(double *)(this + 8);
}



// Vector::cross(Vector const&) const

Vector * Vector::cross(Vector *param_1)

{
  double *in_RDX;
  double *in_RSI;
  
  Vector(param_1,in_RDX[2] * in_RSI[1] - in_RSI[2] * in_RDX[1],
         in_RSI[2] * *in_RDX - in_RDX[2] * *in_RSI,in_RDX[1] * *in_RSI - in_RSI[1] * *in_RDX);
  return param_1;
}



// Vector::normalize() const

Vector * Vector::normalize(void)

{
  double *in_RSI;
  Vector *in_RDI;
  double dVar1;
  
  dVar1 = sqrt(*in_RSI * *in_RSI + in_RSI[1] * in_RSI[1] + in_RSI[2] * in_RSI[2]);
  if (dVar1 != 0.0) {
    Vector(in_RDI,*in_RSI / dVar1,in_RSI[1] / dVar1,in_RSI[2] / dVar1);
    return in_RDI;
  }
                    // WARNING: Subroutine does not return
  __assert_fail("length != 0","vector.cpp",0x42,"Vector Vector::normalize() const");
}



// Vector::check_normalized() const

bool __thiscall Vector::check_normalized(Vector *this)

{
  double dVar1;
  
  dVar1 = sqrt(*(double *)this * *(double *)this + *(double *)(this + 8) * *(double *)(this + 8) +
               *(double *)(this + 0x10) * *(double *)(this + 0x10));
  return ABS(dVar1 - 1.0) < 1e-06;
}



// Vector::check_orthogonal(Vector const&) const

bool __thiscall Vector::check_orthogonal(Vector *this,Vector *param_1)

{
  double dVar1;
  
  dVar1 = (double)dot(this,param_1);
  return ABS(dVar1) < 1e-06;
}



// Vector::rotate(Vector const&, double) const

Vector * __thiscall Vector::rotate(Vector *this,Vector *param_1,double param_2)

{
  long in_FS_OFFSET;
  double dVar1;
  double dVar2;
  Vector local_b8 [32];
  Vector local_98 [32];
  Vector local_78 [32];
  double local_58 [4];
  double local_38 [3];
  long local_20;
  
  local_20 = *(long *)(in_FS_OFFSET + 0x28);
  dVar1 = (param_2 * 3.141592653589793) / 180.0;
  normalize();
  local_38[0] = cos(dVar1);
  operator*(local_98,(double *)param_1);
  local_58[0] = sin(dVar1);
  cross((Vector *)local_38);
  operator*(local_78,local_38);
  cos(dVar1);
  dot(local_b8,param_1);
  operator*((Vector *)local_38,(double *)local_b8);
  operator*((Vector *)local_58,local_38);
  operator+((Vector *)local_38,local_98);
  operator+(this,(Vector *)local_38);
  dVar1 = (double)norm(param_1);
  dVar2 = (double)norm(this);
  if (1e-06 <= ABS(dVar1 - dVar2)) {
                    // WARNING: Subroutine does not return
    __assert_fail("fabs(norm() - v4.norm()) < EPS","vector.cpp",0x5b,
                  "Vector Vector::rotate(const Vector&, double) const");
  }
  if (local_20 != *(long *)(in_FS_OFFSET + 0x28)) {
                    // WARNING: Subroutine does not return
    __stack_chk_fail();
  }
  return this;
}



// Vector::get_reflection(Vector const&) const

Vector * Vector::get_reflection(Vector *param_1)

{
  char cVar1;
  Vector *in_RDX;
  undefined8 *in_RSI;
  long in_FS_OFFSET;
  double local_70;
  undefined8 local_68;
  undefined8 local_60;
  undefined8 local_58;
  undefined8 local_48;
  undefined8 local_40;
  undefined8 local_38;
  double local_28 [3];
  long local_10;
  
  local_10 = *(long *)(in_FS_OFFSET + 0x28);
  cVar1 = check_normalized(in_RDX);
  if (cVar1 == '\0') {
                    // WARNING: Subroutine does not return
    __assert_fail("normal.check_normalized()","vector.cpp",0x61,
                  "Vector Vector::get_reflection(const Vector&) const");
  }
  local_68 = *in_RSI;
  local_60 = in_RSI[1];
  local_58 = in_RSI[2];
  local_48 = *(undefined8 *)in_RDX;
  local_40 = *(undefined8 *)(in_RDX + 8);
  local_38 = *(undefined8 *)(in_RDX + 0x10);
  local_70 = (double)dot((Vector *)&local_68,(Vector *)&local_48);
  local_70 = local_70 + local_70;
  ::operator*(local_28,(Vector *)&local_70);
  operator-(param_1,(Vector *)&local_68);
  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {
                    // WARNING: Subroutine does not return
    __stack_chk_fail();
  }
  return param_1;
}



// Vector::norm() const

void __thiscall Vector::norm(Vector *this)

{
  sqrt(*(double *)this * *(double *)this + *(double *)(this + 8) * *(double *)(this + 8) +
       *(double *)(this + 0x10) * *(double *)(this + 0x10));
  return;
}



// Point3D::Point3D(double, double, double)

void __thiscall Point3D::Point3D(Point3D *this,double param_1,double param_2,double param_3)

{
  *(double *)this = param_1;
  *(double *)(this + 8) = param_2;
  *(double *)(this + 0x10) = param_3;
  return;
}



// Point3D::TEMPNAMEPLACEHOLDERVALUE(Point3D const&) const

Point3D * __thiscall Point3D::operator+(Point3D *this,Point3D *param_1)

{
  double *in_RDX;
  
  Point3D(this,*(double *)param_1 + *in_RDX,*(double *)(param_1 + 8) + in_RDX[1],
          *(double *)(param_1 + 0x10) + in_RDX[2]);
  return this;
}



// Point3D::TEMPNAMEPLACEHOLDERVALUE(Vector const&) const

Point3D * __thiscall Point3D::operator+(Point3D *this,Vector *param_1)

{
  double *in_RDX;
  
  Point3D(this,*(double *)param_1 + *in_RDX,*(double *)(param_1 + 8) + in_RDX[1],
          *(double *)(param_1 + 0x10) + in_RDX[2]);
  return this;
}



// Point3D::TEMPNAMEPLACEHOLDERVALUE(Vector const&)

Point3D * __thiscall Point3D::operator+=(Point3D *this,Vector *param_1)

{
  undefined8 uVar1;
  double *in_RDX;
  
  *(double *)param_1 = *in_RDX + *(double *)param_1;
  *(double *)(param_1 + 8) = in_RDX[1] + *(double *)(param_1 + 8);
  *(double *)(param_1 + 0x10) = in_RDX[2] + *(double *)(param_1 + 0x10);
  uVar1 = *(undefined8 *)(param_1 + 8);
  *(undefined8 *)this = *(undefined8 *)param_1;
  *(undefined8 *)(this + 8) = uVar1;
  *(undefined8 *)(this + 0x10) = *(undefined8 *)(param_1 + 0x10);
  return this;
}



// Point3D::TEMPNAMEPLACEHOLDERVALUE(Vector const&) const

Point3D * __thiscall Point3D::operator-(Point3D *this,Vector *param_1)

{
  double *in_RDX;
  
  Point3D(this,*(double *)param_1 - *in_RDX,*(double *)(param_1 + 8) - in_RDX[1],
          *(double *)(param_1 + 0x10) - in_RDX[2]);
  return this;
}



// Point3D::TEMPNAMEPLACEHOLDERVALUE(Vector const&)

Point3D * __thiscall Point3D::operator-=(Point3D *this,Vector *param_1)

{
  undefined8 uVar1;
  double *in_RDX;
  
  *(double *)param_1 = *(double *)param_1 - *in_RDX;
  *(double *)(param_1 + 8) = *(double *)(param_1 + 8) - in_RDX[1];
  *(double *)(param_1 + 0x10) = *(double *)(param_1 + 0x10) - in_RDX[2];
  uVar1 = *(undefined8 *)(param_1 + 8);
  *(undefined8 *)this = *(undefined8 *)param_1;
  *(undefined8 *)(this + 8) = uVar1;
  *(undefined8 *)(this + 0x10) = *(undefined8 *)(param_1 + 0x10);
  return this;
}



// Point3D::TEMPNAMEPLACEHOLDERVALUE(double const&) const

Point3D * __thiscall Point3D::operator*(Point3D *this,double *param_1)

{
  double *in_RDX;
  
  Point3D(this,*param_1 * *in_RDX,param_1[1] * *in_RDX,param_1[2] * *in_RDX);
  return this;
}



// Point3D::TEMPNAMEPLACEHOLDERVALUE(double const&)

Point3D * __thiscall Point3D::operator*=(Point3D *this,double *param_1)

{
  double dVar1;
  double *in_RDX;
  
  *param_1 = *in_RDX * *param_1;
  param_1[1] = *in_RDX * param_1[1];
  param_1[2] = *in_RDX * param_1[2];
  dVar1 = param_1[1];
  *(double *)this = *param_1;
  *(double *)(this + 8) = dVar1;
  *(double *)(this + 0x10) = param_1[2];
  return this;
}



// Point3D::TEMPNAMEPLACEHOLDERVALUE(double const&) const

Point3D * __thiscall Point3D::operator/(Point3D *this,double *param_1)

{
  double *in_RDX;
  
  Point3D(this,*param_1 / *in_RDX,param_1[1] / *in_RDX,param_1[2] / *in_RDX);
  return this;
}



// Point3D::TEMPNAMEPLACEHOLDERVALUE(double const&)

Point3D * __thiscall Point3D::operator/=(Point3D *this,double *param_1)

{
  double dVar1;
  double *in_RDX;
  
  *param_1 = *param_1 / *in_RDX;
  param_1[1] = param_1[1] / *in_RDX;
  param_1[2] = param_1[2] / *in_RDX;
  dVar1 = param_1[1];
  *(double *)this = *param_1;
  *(double *)(this + 8) = dVar1;
  *(double *)(this + 0x10) = param_1[2];
  return this;
}



// Point3D::distance(Point3D const&) const

void __thiscall Point3D::distance(Point3D *this,Point3D *param_1)

{
  double dVar1;
  double dVar2;
  double dVar3;
  
  dVar1 = pow(*(double *)this - *(double *)param_1,2.0);
  dVar2 = pow(*(double *)(this + 8) - *(double *)(param_1 + 8),2.0);
  dVar3 = pow(*(double *)(this + 0x10) - *(double *)(param_1 + 0x10),2.0);
  sqrt(dVar3 + dVar2 + dVar1);
  return;
}



// get_plane_equation(Point3D const&, Point3D const&, Point3D const&)

Point3D * get_plane_equation(Point3D *param_1,Point3D *param_2,Point3D *param_3)

{
  double *in_RCX;
  long in_FS_OFFSET;
  double local_88;
  double local_80;
  double local_78;
  double local_70;
  Vector local_68 [32];
  Vector local_48 [32];
  double local_28;
  double local_20;
  double local_18;
  long local_10;
  
  local_10 = *(long *)(in_FS_OFFSET + 0x28);
  Vector::Vector(local_68,*(double *)param_3 - *(double *)param_2,
                 *(double *)(param_3 + 8) - *(double *)(param_2 + 8),
                 *(double *)(param_3 + 0x10) - *(double *)(param_2 + 0x10));
  Vector::Vector(local_48,*in_RCX - *(double *)param_2,in_RCX[1] - *(double *)(param_2 + 8),
                 in_RCX[2] - *(double *)(param_2 + 0x10));
  Vector::cross((Vector *)&local_28);
  local_88 = local_28;
  local_80 = local_20;
  local_78 = local_18;
  local_70 = -(local_18 * *(double *)(param_2 + 0x10) +
              *(double *)param_2 * local_28 + local_20 * *(double *)(param_2 + 8));
  std::make_tuple<double&,double&,double&,double&>((double *)param_1,&local_88,&local_80,&local_78);
  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {
                    // WARNING: Subroutine does not return
    __stack_chk_fail();
  }
  return param_1;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked
// std::tuple<std::__strip_reference_wrapper<std::decay<double&>::type>::__type,
// std::__strip_reference_wrapper<std::decay<double&>::type>::__type,
// std::__strip_reference_wrapper<std::decay<double&>::type>::__type,
// std::__strip_reference_wrapper<std::decay<double&>::type>::__type> std::make_tuple<double&,
// double&, double&, double&>(double&, double&, double&, double&)

double * std::make_tuple<double&,double&,double&,double&>
                   (double *param_1,double *param_2,double *param_3,double *param_4)

{
  double *pdVar1;
  double *pdVar2;
  double *pdVar3;
  double *pdVar4;
  type *in_R8;
  
  pdVar1 = forward<double&>(in_R8);
  pdVar2 = forward<double&>((type *)param_4);
  pdVar3 = forward<double&>((type *)param_3);
  pdVar4 = forward<double&>((type *)param_2);
  tuple<double,double,double,double>::tuple<double&,double&,double&,double&,true,true>
            ((tuple<double,double,double,double> *)param_1,pdVar4,pdVar3,pdVar2,pdVar1);
  return param_1;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked
// double& std::forward<double&>(std::remove_reference<double&>::type&)

double * std::forward<double&>(type *param_1)

{
  return (double *)param_1;
}



// std::tuple<double, double, double, double>::tuple<double&, double&, double&, double&, true,
// true>(double&, double&, double&, double&)

void __thiscall
std::tuple<double,double,double,double>::tuple<double&,double&,double&,double&,true,true>
          (tuple<double,double,double,double> *this,double *param_1,double *param_2,double *param_3,
          double *param_4)

{
  double *pdVar1;
  double *pdVar2;
  double *pdVar3;
  double *pdVar4;
  
  pdVar1 = forward<double&>((type *)param_4);
  pdVar2 = forward<double&>((type *)param_3);
  pdVar3 = forward<double&>((type *)param_2);
  pdVar4 = forward<double&>((type *)param_1);
  _Tuple_impl<0ul,double,double,double,double>::_Tuple_impl<double&,double&,double&,double&,void>
            ((_Tuple_impl<0ul,double,double,double,double> *)this,pdVar4,pdVar3,pdVar2,pdVar1);
  return;
}



// std::_Tuple_impl<0ul, double, double, double, double>::_Tuple_impl<double&, double&, double&,
// double&, void>(double&, double&, double&, double&)

void __thiscall
std::_Tuple_impl<0ul,double,double,double,double>::_Tuple_impl<double&,double&,double&,double&,void>
          (_Tuple_impl<0ul,double,double,double,double> *this,double *param_1,double *param_2,
          double *param_3,double *param_4)

{
  double *pdVar1;
  double *pdVar2;
  double *pdVar3;
  
  pdVar1 = forward<double&>((type *)param_4);
  pdVar2 = forward<double&>((type *)param_3);
  pdVar3 = forward<double&>((type *)param_2);
  _Tuple_impl<1ul,double,double,double>::_Tuple_impl<double&,double&,double&,void>
            ((_Tuple_impl<1ul,double,double,double> *)this,pdVar3,pdVar2,pdVar1);
  pdVar1 = forward<double&>((type *)param_1);
  _Head_base<0ul,double,false>::_Head_base<double&>
            ((_Head_base<0ul,double,false> *)(this + 0x18),pdVar1);
  return;
}



// std::_Tuple_impl<1ul, double, double, double>::_Tuple_impl<double&, double&, double&,
// void>(double&, double&, double&)

void __thiscall
std::_Tuple_impl<1ul,double,double,double>::_Tuple_impl<double&,double&,double&,void>
          (_Tuple_impl<1ul,double,double,double> *this,double *param_1,double *param_2,
          double *param_3)

{
  double *pdVar1;
  double *pdVar2;
  
  pdVar1 = forward<double&>((type *)param_3);
  pdVar2 = forward<double&>((type *)param_2);
  _Tuple_impl<2ul,double,double>::_Tuple_impl<double&,double&,void>
            ((_Tuple_impl<2ul,double,double> *)this,pdVar2,pdVar1);
  pdVar1 = forward<double&>((type *)param_1);
  _Head_base<1ul,double,false>::_Head_base<double&>
            ((_Head_base<1ul,double,false> *)(this + 0x10),pdVar1);
  return;
}



// std::_Head_base<0ul, double, false>::_Head_base<double&>(double&)

void __thiscall
std::_Head_base<0ul,double,false>::_Head_base<double&>
          (_Head_base<0ul,double,false> *this,double *param_1)

{
  double *pdVar1;
  
  pdVar1 = forward<double&>((type *)param_1);
  *(double *)this = *pdVar1;
  return;
}



// std::_Tuple_impl<2ul, double, double>::_Tuple_impl<double&, double&, void>(double&, double&)

void __thiscall
std::_Tuple_impl<2ul,double,double>::_Tuple_impl<double&,double&,void>
          (_Tuple_impl<2ul,double,double> *this,double *param_1,double *param_2)

{
  double *pdVar1;
  
  pdVar1 = forward<double&>((type *)param_2);
  _Tuple_impl<3ul,double>::_Tuple_impl<double&>((_Tuple_impl<3ul,double> *)this,pdVar1);
  pdVar1 = forward<double&>((type *)param_1);
  _Head_base<2ul,double,false>::_Head_base<double&>
            ((_Head_base<2ul,double,false> *)(this + 8),pdVar1);
  return;
}



// std::_Head_base<1ul, double, false>::_Head_base<double&>(double&)

void __thiscall
std::_Head_base<1ul,double,false>::_Head_base<double&>
          (_Head_base<1ul,double,false> *this,double *param_1)

{
  double *pdVar1;
  
  pdVar1 = forward<double&>((type *)param_1);
  *(double *)this = *pdVar1;
  return;
}



// std::_Tuple_impl<3ul, double>::_Tuple_impl<double&>(double&)

void __thiscall
std::_Tuple_impl<3ul,double>::_Tuple_impl<double&>(_Tuple_impl<3ul,double> *this,double *param_1)

{
  double *pdVar1;
  
  pdVar1 = forward<double&>((type *)param_1);
  _Head_base<3ul,double,false>::_Head_base<double&>((_Head_base<3ul,double,false> *)this,pdVar1);
  return;
}



// std::_Head_base<2ul, double, false>::_Head_base<double&>(double&)

void __thiscall
std::_Head_base<2ul,double,false>::_Head_base<double&>
          (_Head_base<2ul,double,false> *this,double *param_1)

{
  double *pdVar1;
  
  pdVar1 = forward<double&>((type *)param_1);
  *(double *)this = *pdVar1;
  return;
}



// std::_Head_base<3ul, double, false>::_Head_base<double&>(double&)

void __thiscall
std::_Head_base<3ul,double,false>::_Head_base<double&>
          (_Head_base<3ul,double,false> *this,double *param_1)

{
  double *pdVar1;
  
  pdVar1 = forward<double&>((type *)param_1);
  *(double *)this = *pdVar1;
  return;
}



// Ball::Ball(double, int, int)

void __thiscall Ball::Ball(Ball *this,double param_1,int param_2,int param_3)

{
  Ball *pBVar1;
  Ball *pBVar2;
  long in_FS_OFFSET;
  undefined8 local_78;
  undefined8 local_70;
  undefined8 local_68;
  int local_50;
  int local_4c;
  double local_48;
  Ball *local_40;
  undefined8 local_38;
  undefined8 local_30;
  undefined8 local_28;
  long local_20;
  
  local_20 = *(long *)(in_FS_OFFSET + 0x28);
  local_50 = param_3;
  local_4c = param_2;
  local_48 = param_1;
  local_40 = this;
  Point3D::Point3D((Point3D *)this,0.0,0.0,0.0);
  Vector::Vector((Vector *)(local_40 + 0x18),0.0,0.0,0.0);
  Vector::Vector((Vector *)(local_40 + 0x30),0.0,0.0,0.0);
  Vector::Vector((Vector *)(local_40 + 0x48),0.0,0.0,0.0);
  Vector::Vector((Vector *)(local_40 + 0x60),0.0,0.0,0.0);
  *(double *)(local_40 + 0x78) = local_48;
  *(int *)(local_40 + 0x80) = local_4c;
  *(int *)(local_40 + 0x84) = local_50;
  *(undefined8 *)(local_40 + 0x88) = 0;
  std::vector<Point3D,std::allocator<Point3D>>::vector
            ((vector<Point3D,std::allocator<Point3D>> *)(local_40 + 0x90));
                    // try { // try from 00106e74 to 00106fb5 has its CatchHandler @ 00106fe4
  Vector::Vector((Vector *)&local_38,1.0,1.0,0.0);
  pBVar1 = local_40;
  Vector::normalize();
  *(undefined8 *)(pBVar1 + 0x18) = local_78;
  *(undefined8 *)(pBVar1 + 0x20) = local_70;
  *(undefined8 *)(pBVar1 + 0x28) = local_68;
  Vector::Vector((Vector *)&local_38,0.0,0.0,1.0);
  pBVar1 = local_40;
  Vector::normalize();
  pBVar2 = local_40;
  *(undefined8 *)(pBVar1 + 0x48) = local_78;
  *(undefined8 *)(pBVar1 + 0x50) = local_70;
  *(undefined8 *)(pBVar1 + 0x58) = local_68;
  Vector::cross((Vector *)&local_78);
  *(undefined8 *)(pBVar2 + 0x30) = local_78;
  *(undefined8 *)(pBVar2 + 0x38) = local_70;
  *(undefined8 *)(pBVar2 + 0x40) = local_68;
  Point3D::Point3D((Point3D *)&local_38,0.0,0.0,local_48);
  *(undefined8 *)local_40 = local_38;
  *(undefined8 *)(local_40 + 8) = local_30;
  *(undefined8 *)(local_40 + 0x10) = local_28;
  compute_vertices(local_40);
  Vector::Vector((Vector *)&local_38,5.0,3.0,15.0);
  *(undefined8 *)(local_40 + 0x60) = local_38;
  *(undefined8 *)(local_40 + 0x68) = local_30;
  *(undefined8 *)(local_40 + 0x70) = local_28;
  if (local_20 != *(long *)(in_FS_OFFSET + 0x28)) {
                    // WARNING: Subroutine does not return
    __stack_chk_fail();
  }
  return;
}



// Ball::compute_vertices()

void __thiscall Ball::compute_vertices(Ball *this)

{
  double dVar1;
  double dVar2;
  int iVar3;
  int iVar4;
  long in_FS_OFFSET;
  double __x;
  double dVar5;
  double dVar6;
  double dVar7;
  double dVar8;
  double dVar9;
  double dVar10;
  int local_78;
  int local_74;
  Point3D local_38 [24];
  long local_20;
  
  local_20 = *(long *)(in_FS_OFFSET + 0x28);
  iVar3 = *(int *)(this + 0x84);
  iVar4 = *(int *)(this + 0x80);
  for (local_78 = 0; local_78 <= *(int *)(this + 0x84); local_78 = local_78 + 1) {
    __x = 1.5707963267948966 - (double)local_78 * (3.141592653589793 / (double)iVar3);
    for (local_74 = 0; local_74 <= *(int *)(this + 0x80); local_74 = local_74 + 1) {
      dVar5 = (double)local_74 * (6.283185307179586 / (double)iVar4);
      dVar1 = *(double *)(this + 0x78);
      dVar6 = cos(__x);
      dVar7 = cos(dVar5);
      dVar2 = *(double *)(this + 0x78);
      dVar8 = cos(__x);
      dVar9 = sin(dVar5);
      dVar5 = *(double *)(this + 0x78);
      dVar10 = sin(__x);
      Point3D::Point3D(local_38,dVar7 * dVar6 * dVar1,dVar9 * dVar8 * dVar2,dVar10 * dVar5);
      std::vector<Point3D,std::allocator<Point3D>>::push_back
                ((vector<Point3D,std::allocator<Point3D>> *)(this + 0x90),local_38);
    }
  }
  if (local_20 != *(long *)(in_FS_OFFSET + 0x28)) {
                    // WARNING: Subroutine does not return
    __stack_chk_fail();
  }
  return;
}



// Ball::rotate_ball_vertices(Vector const&, double)

void __thiscall Ball::rotate_ball_vertices(Ball *this,Vector *param_1,double param_2)

{
  double dVar1;
  double dVar2;
  long lVar3;
  double *pdVar4;
  undefined8 *puVar5;
  ulong uVar6;
  ulong uVar7;
  long in_FS_OFFSET;
  double local_a8;
  double local_a0;
  double local_98;
  double local_80;
  Vector *local_78;
  Ball *local_70;
  int local_5c;
  double local_58;
  double local_50;
  double local_48;
  undefined8 local_38;
  undefined8 local_30;
  undefined8 local_28;
  long local_20;
  
  local_20 = *(long *)(in_FS_OFFSET + 0x28);
  local_5c = 0;
  local_80 = param_2;
  local_78 = param_1;
  local_70 = this;
  while( true ) {
    uVar7 = (ulong)local_5c;
    uVar6 = std::vector<Point3D,std::allocator<Point3D>>::size
                      ((vector<Point3D,std::allocator<Point3D>> *)(local_70 + 0x90));
    if (uVar6 <= uVar7) break;
    lVar3 = std::vector<Point3D,std::allocator<Point3D>>::operator[]
                      ((vector<Point3D,std::allocator<Point3D>> *)(local_70 + 0x90),(long)local_5c);
    dVar1 = *(double *)(lVar3 + 0x10);
    lVar3 = std::vector<Point3D,std::allocator<Point3D>>::operator[]
                      ((vector<Point3D,std::allocator<Point3D>> *)(local_70 + 0x90),(long)local_5c);
    dVar2 = *(double *)(lVar3 + 8);
    pdVar4 = (double *)
             std::vector<Point3D,std::allocator<Point3D>>::operator[]
                       ((vector<Point3D,std::allocator<Point3D>> *)(local_70 + 0x90),(long)local_5c)
    ;
    Vector::Vector((Vector *)&local_58,*pdVar4,dVar2,dVar1);
    Vector::rotate((Vector *)&local_a8,(Vector *)&local_58,-local_80);
    local_58 = local_a8;
    local_50 = local_a0;
    local_48 = local_98;
    Point3D::Point3D((Point3D *)&local_38,local_a8,local_a0,local_98);
    puVar5 = (undefined8 *)
             std::vector<Point3D,std::allocator<Point3D>>::operator[]
                       ((vector<Point3D,std::allocator<Point3D>> *)(local_70 + 0x90),(long)local_5c)
    ;
    *puVar5 = local_38;
    puVar5[1] = local_30;
    puVar5[2] = local_28;
    local_5c = local_5c + 1;
  }
  if (local_20 != *(long *)(in_FS_OFFSET + 0x28)) {
                    // WARNING: Subroutine does not return
    __stack_chk_fail();
  }
  return;
}



// Ball::update_physics(double, double, double, double, double, double, double, double, double)

void Ball::update_physics
               (double param_1,double param_2,double param_3,double param_4,double param_5,
               double param_6,double param_7,double param_8,double param_9)

{
  Vector *pVVar1;
  Vector *in_RDI;
  long in_FS_OFFSET;
  double dVar2;
  undefined8 local_118;
  undefined8 local_110;
  undefined8 local_108;
  double local_f0;
  double local_e8;
  double local_e0;
  double local_d8;
  double local_d0;
  double local_c8;
  double local_c0;
  double local_b8;
  Vector *local_b0;
  double local_a8;
  double local_a0;
  double local_98;
  double local_90;
  double local_88;
  Vector local_78 [32];
  undefined8 local_58;
  undefined8 local_50;
  undefined8 local_48;
  Vector local_38 [24];
  long local_20;
  
  local_20 = *(long *)(in_FS_OFFSET + 0x28);
  *(double *)(in_RDI + 0x70) = *(double *)(in_RDI + 0x70) - param_1 * param_8;
  local_98 = *(double *)in_RDI;
  local_90 = *(double *)(in_RDI + 8);
  local_88 = *(double *)(in_RDI + 0x10);
  local_f0 = param_8;
  local_e8 = param_7;
  local_e0 = param_6;
  local_d8 = param_5;
  local_d0 = param_4;
  local_c8 = param_3;
  local_c0 = param_2;
  local_b8 = param_1;
  local_b0 = in_RDI;
  Vector::operator*(local_38,(double *)(in_RDI + 0x60));
  pVVar1 = local_b0;
  Point3D::operator+((Point3D *)&local_118,local_b0);
  *(undefined8 *)pVVar1 = local_118;
  *(undefined8 *)(pVVar1 + 8) = local_110;
  *(undefined8 *)(pVVar1 + 0x10) = local_108;
  if (*(double *)(local_b0 + 0x10) - *(double *)(local_b0 + 0x78) < local_e0) {
    *(double *)(local_b0 + 0x10) = *(double *)(local_b0 + 0x78) + local_e0;
    *(double *)(local_b0 + 0x70) = -*(double *)(local_b0 + 0x70) * param_9;
    if (ABS(*(double *)(local_b0 + 0x70)) < 0.1) {
      *(double *)(local_b0 + 0x70) = 0.0;
      *(double *)(local_b0 + 0x10) = *(double *)(local_b0 + 0x78) + local_e0;
    }
  }
  if (local_e8 < *(double *)(local_b0 + 0x78) + *(double *)(local_b0 + 0x10)) {
    *(double *)(local_b0 + 0x10) = local_e8 - *(double *)(local_b0 + 0x78);
    *(double *)(local_b0 + 0x70) = -*(double *)(local_b0 + 0x70) * param_9;
  }
  if (*(double *)local_b0 - *(double *)(local_b0 + 0x78) < local_c0) {
    *(double *)local_b0 = *(double *)(local_b0 + 0x78) + local_c0;
    *(double *)(local_b0 + 0x60) = -*(double *)(local_b0 + 0x60) * param_9;
  }
  if (local_c8 < *(double *)(local_b0 + 0x78) + *(double *)local_b0) {
    *(double *)local_b0 = local_c8 - *(double *)(local_b0 + 0x78);
    *(double *)(local_b0 + 0x60) = -*(double *)(local_b0 + 0x60) * param_9;
  }
  if (*(double *)(local_b0 + 8) - *(double *)(local_b0 + 0x78) < local_d0) {
    *(double *)(local_b0 + 8) = *(double *)(local_b0 + 0x78) + local_d0;
    *(double *)(local_b0 + 0x68) = -*(double *)(local_b0 + 0x68) * param_9;
  }
  if (local_d8 < *(double *)(local_b0 + 0x78) + *(double *)(local_b0 + 8)) {
    *(double *)(local_b0 + 8) = local_d8 - *(double *)(local_b0 + 0x78);
    *(double *)(local_b0 + 0x68) = -*(double *)(local_b0 + 0x68) * param_9;
  }
  Vector::Vector(local_78,*(double *)local_b0 - local_98,*(double *)(local_b0 + 8) - local_90,
                 *(double *)(local_b0 + 0x10) - local_88);
  local_a8 = (double)Vector::norm(local_78);
  if (1e-06 < local_a8) {
    local_a0 = (local_a8 / *(double *)(local_b0 + 0x78)) * 57.29577951308232;
    Vector::Vector(local_38,0.0,0.0,1.0);
    Vector::cross((Vector *)&local_58);
    dVar2 = (double)Vector::norm((Vector *)&local_58);
    if (1e-06 < dVar2) {
      Vector::normalize();
      local_58 = local_118;
      local_50 = local_110;
      local_48 = local_108;
      rotate_ball_vertices((Ball *)local_b0,(Vector *)&local_58,local_a0);
    }
  }
  if (local_20 == *(long *)(in_FS_OFFSET + 0x28)) {
    return;
  }
                    // WARNING: Subroutine does not return
  __stack_chk_fail();
}



// operator new(unsigned long, void*)

void * operator_new(ulong param_1,void *param_2)

{
  return param_2;
}



// std::_Vector_base<Point3D, std::allocator<Point3D> >::_Vector_base()

void __thiscall
std::_Vector_base<Point3D,std::allocator<Point3D>>::_Vector_base
          (_Vector_base<Point3D,std::allocator<Point3D>> *this)

{
  _Vector_impl::_Vector_impl((_Vector_impl *)this);
  return;
}



// std::vector<Point3D, std::allocator<Point3D> >::vector()

void __thiscall
std::vector<Point3D,std::allocator<Point3D>>::vector(vector<Point3D,std::allocator<Point3D>> *this)

{
  _Vector_base<Point3D,std::allocator<Point3D>>::_Vector_base
            ((_Vector_base<Point3D,std::allocator<Point3D>> *)this);
  return;
}



// std::_Vector_base<Point3D, std::allocator<Point3D> >::_Vector_impl::_Vector_impl()

void __thiscall
std::_Vector_base<Point3D,std::allocator<Point3D>>::_Vector_impl::_Vector_impl(_Vector_impl *this)

{
  _Vector_impl_data::_Vector_impl_data((_Vector_impl_data *)this);
  return;
}



// std::vector<Point3D, std::allocator<Point3D> >::push_back(Point3D&&)

void __thiscall
std::vector<Point3D,std::allocator<Point3D>>::push_back
          (vector<Point3D,std::allocator<Point3D>> *this,Point3D *param_1)

{
  type *ptVar1;
  
  ptVar1 = move<Point3D&>(param_1);
  emplace_back<Point3D>(this,(Point3D *)ptVar1);
  return;
}



// std::vector<Point3D, std::allocator<Point3D> >::size() const

long __thiscall
std::vector<Point3D,std::allocator<Point3D>>::size(vector<Point3D,std::allocator<Point3D>> *this)

{
  return (*(long *)(this + 8) - *(long *)this >> 3) * -0x5555555555555555;
}



// std::vector<Point3D, std::allocator<Point3D> >::operator[](unsigned long)

long __thiscall
std::vector<Point3D,std::allocator<Point3D>>::operator[]
          (vector<Point3D,std::allocator<Point3D>> *this,ulong param_1)

{
  return param_1 * 0x18 + *(long *)this;
}



// std::_Vector_base<Point3D, std::allocator<Point3D> >::_Vector_impl_data::_Vector_impl_data()

void __thiscall
std::_Vector_base<Point3D,std::allocator<Point3D>>::_Vector_impl_data::_Vector_impl_data
          (_Vector_impl_data *this)

{
  *(undefined8 *)this = 0;
  *(undefined8 *)(this + 8) = 0;
  *(undefined8 *)(this + 0x10) = 0;
  return;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked
// std::remove_reference<Point3D&>::type&& std::move<Point3D&>(Point3D&)

type * std::move<Point3D&>(Point3D *param_1)

{
  return (type *)param_1;
}



// Point3D& std::vector<Point3D, std::allocator<Point3D> >::emplace_back<Point3D>(Point3D&&)

Point3D * __thiscall
std::vector<Point3D,std::allocator<Point3D>>::emplace_back<Point3D>
          (vector<Point3D,std::allocator<Point3D>> *this,Point3D *param_1)

{
  void *pvVar1;
  Point3D *pPVar2;
  undefined8 *puVar3;
  undefined8 uVar4;
  
  if (*(long *)(this + 8) == *(long *)(this + 0x10)) {
    pPVar2 = forward<Point3D>((type *)param_1);
    uVar4 = end(this);
    _M_realloc_insert<Point3D>(this,uVar4,pPVar2);
  }
  else {
    pPVar2 = forward<Point3D>((type *)param_1);
    pvVar1 = *(void **)(this + 8);
    pPVar2 = forward<Point3D>((type *)pPVar2);
    puVar3 = (undefined8 *)operator_new(0x18,pvVar1);
    pPVar2 = forward<Point3D>((type *)pPVar2);
    uVar4 = *(undefined8 *)(pPVar2 + 8);
    *puVar3 = *(undefined8 *)pPVar2;
    puVar3[1] = uVar4;
    puVar3[2] = *(undefined8 *)(pPVar2 + 0x10);
    *(long *)(this + 8) = *(long *)(this + 8) + 0x18;
  }
  pPVar2 = (Point3D *)back(this);
  return pPVar2;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked
// Point3D&& std::forward<Point3D>(std::remove_reference<Point3D>::type&)

Point3D * std::forward<Point3D>(type *param_1)

{
  return (Point3D *)param_1;
}



// std::vector<Point3D, std::allocator<Point3D> >::end()

undefined8 __thiscall
std::vector<Point3D,std::allocator<Point3D>>::end(vector<Point3D,std::allocator<Point3D>> *this)

{
  long in_FS_OFFSET;
  undefined8 local_18;
  long local_10;
  
  local_10 = *(long *)(in_FS_OFFSET + 0x28);
  __normal_iterator<Point3D*,std::vector<Point3D,std::allocator<Point3D>>>::__normal_iterator
            ((__normal_iterator<Point3D*,std::vector<Point3D,std::allocator<Point3D>>> *)&local_18,
             (Point3D **)(this + 8));
  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {
                    // WARNING: Subroutine does not return
    __stack_chk_fail();
  }
  return local_18;
}



// void std::vector<Point3D, std::allocator<Point3D>
// >::_M_realloc_insert<Point3D>(__normal_iterator<Point3D*, std::vector<Point3D,
// std::allocator<Point3D> > >, Point3D&&)

void __thiscall
std::vector<Point3D,std::allocator<Point3D>>::_M_realloc_insert<Point3D>
          (vector<Point3D,std::allocator<Point3D>> *this,undefined8 param_2,type *param_3)

{
  undefined8 uVar1;
  undefined8 *puVar2;
  Point3D *pPVar3;
  allocator *paVar4;
  long lVar5;
  long in_FS_OFFSET;
  undefined8 local_98;
  vector<Point3D,std::allocator<Point3D>> *local_90;
  undefined8 local_88;
  ulong local_80;
  Point3D *local_78;
  Point3D *local_70;
  long local_68;
  Point3D *local_60;
  Point3D *local_58;
  _Vector_base<Point3D,std::allocator<Point3D>> *local_50;
  Point3D *local_48;
  Point3D *local_40;
  _Vector_base<Point3D,std::allocator<Point3D>> *local_38;
  Point3D *local_30;
  type *local_28;
  long local_20;
  
  local_20 = *(long *)(in_FS_OFFSET + 0x28);
  local_98 = param_2;
  local_90 = this;
  local_80 = _M_check_len(this,1,"vector::_M_realloc_insert");
  local_78 = *(Point3D **)local_90;
  local_70 = *(Point3D **)(local_90 + 8);
  local_88 = begin(local_90);
  local_68 = operator-((__normal_iterator *)&local_98,(__normal_iterator *)&local_88);
  local_60 = (Point3D *)
             _Vector_base<Point3D,std::allocator<Point3D>>::_M_allocate
                       ((_Vector_base<Point3D,std::allocator<Point3D>> *)local_90,local_80);
  local_58 = local_60;
  local_40 = forward<Point3D>(param_3);
  local_48 = local_60 + local_68 * 0x18;
  local_50 = (_Vector_base<Point3D,std::allocator<Point3D>> *)local_90;
  local_28 = (type *)forward<Point3D>((type *)local_40);
  local_38 = local_50;
  local_30 = local_48;
  puVar2 = (undefined8 *)operator_new(0x18,local_48);
  pPVar3 = forward<Point3D>(local_28);
  uVar1 = *(undefined8 *)(pPVar3 + 8);
  *puVar2 = *(undefined8 *)pPVar3;
  puVar2[1] = uVar1;
  puVar2[2] = *(undefined8 *)(pPVar3 + 0x10);
  local_58 = (Point3D *)0x0;
  paVar4 = (allocator *)
           _Vector_base<Point3D,std::allocator<Point3D>>::_M_get_Tp_allocator
                     ((_Vector_base<Point3D,std::allocator<Point3D>> *)local_90);
  puVar2 = (undefined8 *)
           __normal_iterator<Point3D*,std::vector<Point3D,std::allocator<Point3D>>>::base
                     ((__normal_iterator<Point3D*,std::vector<Point3D,std::allocator<Point3D>>> *)
                      &local_98);
  lVar5 = _S_relocate(local_78,(Point3D *)*puVar2,local_60,paVar4);
  local_58 = (Point3D *)(lVar5 + 0x18);
  paVar4 = (allocator *)
           _Vector_base<Point3D,std::allocator<Point3D>>::_M_get_Tp_allocator
                     ((_Vector_base<Point3D,std::allocator<Point3D>> *)local_90);
  puVar2 = (undefined8 *)
           __normal_iterator<Point3D*,std::vector<Point3D,std::allocator<Point3D>>>::base
                     ((__normal_iterator<Point3D*,std::vector<Point3D,std::allocator<Point3D>>> *)
                      &local_98);
  local_58 = (Point3D *)_S_relocate((Point3D *)*puVar2,local_70,local_58,paVar4);
  _Vector_base<Point3D,std::allocator<Point3D>>::_M_deallocate
            ((_Vector_base<Point3D,std::allocator<Point3D>> *)local_90,local_78,
             (*(long *)(local_90 + 0x10) - (long)local_78 >> 3) * -0x5555555555555555);
  *(Point3D **)local_90 = local_60;
  *(Point3D **)(local_90 + 8) = local_58;
  *(Point3D **)(local_90 + 0x10) = local_60 + local_80 * 0x18;
  if (local_20 != *(long *)(in_FS_OFFSET + 0x28)) {
                    // WARNING: Subroutine does not return
    __stack_chk_fail();
  }
  return;
}



// std::vector<Point3D, std::allocator<Point3D> >::back()

void __thiscall
std::vector<Point3D,std::allocator<Point3D>>::back(vector<Point3D,std::allocator<Point3D>> *this)

{
  long in_FS_OFFSET;
  undefined8 local_20;
  undefined8 local_18;
  long local_10;
  
  local_10 = *(long *)(in_FS_OFFSET + 0x28);
  local_20 = end(this);
  local_18 = __normal_iterator<Point3D*,std::vector<Point3D,std::allocator<Point3D>>>::operator-
                       ((__normal_iterator<Point3D*,std::vector<Point3D,std::allocator<Point3D>>> *)
                        &local_20,1);
  __normal_iterator<Point3D*,std::vector<Point3D,std::allocator<Point3D>>>::operator*
            ((__normal_iterator<Point3D*,std::vector<Point3D,std::allocator<Point3D>>> *)&local_18);
  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {
                    // WARNING: Subroutine does not return
    __stack_chk_fail();
  }
  return;
}



// __normal_iterator<Point3D*, std::vector<Point3D, std::allocator<Point3D> >
// >::__normal_iterator(Point3D* const&)

void __thiscall
__normal_iterator<Point3D*,std::vector<Point3D,std::allocator<Point3D>>>::__normal_iterator
          (__normal_iterator<Point3D*,std::vector<Point3D,std::allocator<Point3D>>> *this,
          Point3D **param_1)

{
  *(Point3D **)this = *param_1;
  return;
}



// std::vector<Point3D, std::allocator<Point3D> >::_M_check_len(unsigned long, char const*) const

ulong __thiscall
std::vector<Point3D,std::allocator<Point3D>>::_M_check_len
          (vector<Point3D,std::allocator<Point3D>> *this,ulong param_1,char *param_2)

{
  long lVar1;
  long lVar2;
  ulong *puVar3;
  ulong uVar4;
  ulong uVar5;
  long in_FS_OFFSET;
  ulong local_48;
  vector<Point3D,std::allocator<Point3D>> *local_40;
  ulong local_30;
  ulong local_28;
  long local_20;
  
  local_20 = *(long *)(in_FS_OFFSET + 0x28);
  local_48 = param_1;
  local_40 = this;
  lVar1 = max_size(this);
  lVar2 = size(local_40);
  if ((ulong)(lVar1 - lVar2) < local_48) {
    if (local_20 != *(long *)(in_FS_OFFSET + 0x28)) {
                    // WARNING: Subroutine does not return
      __stack_chk_fail();
    }
    std::__throw_length_error(param_2);
  }
  lVar1 = size(local_40);
  local_30 = size(local_40);
  puVar3 = max<unsigned_long>(&local_30,&local_48);
  local_28 = *puVar3 + lVar1;
  uVar4 = size(local_40);
  if ((local_28 < uVar4) || (uVar5 = max_size(local_40), uVar4 = local_28, uVar5 < local_28)) {
    uVar4 = max_size(local_40);
  }
  if (local_20 == *(long *)(in_FS_OFFSET + 0x28)) {
    return uVar4;
  }
                    // WARNING: Subroutine does not return
  __stack_chk_fail();
}



// std::vector<Point3D, std::allocator<Point3D> >::begin()

undefined8 __thiscall
std::vector<Point3D,std::allocator<Point3D>>::begin(vector<Point3D,std::allocator<Point3D>> *this)

{
  long in_FS_OFFSET;
  undefined8 local_18;
  long local_10;
  
  local_10 = *(long *)(in_FS_OFFSET + 0x28);
  __normal_iterator<Point3D*,std::vector<Point3D,std::allocator<Point3D>>>::__normal_iterator
            ((__normal_iterator<Point3D*,std::vector<Point3D,std::allocator<Point3D>>> *)&local_18,
             (Point3D **)this);
  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {
                    // WARNING: Subroutine does not return
    __stack_chk_fail();
  }
  return local_18;
}



// __normal_iterator<Point3D*, std::vector<Point3D, std::allocator<Point3D> > >::difference_type
// TEMPNAMEPLACEHOLDERVALUE(__normal_iterator<Point3D*, std::vector<Point3D, std::allocator<Point3D>
// > > const&, __normal_iterator<Point3D*, std::vector<Point3D, std::allocator<Point3D> > > const&)

long operator-(__normal_iterator *param_1,__normal_iterator *param_2)

{
  long lVar1;
  long *plVar2;
  
  plVar2 = (long *)__normal_iterator<Point3D*,std::vector<Point3D,std::allocator<Point3D>>>::base
                             ((__normal_iterator<Point3D*,std::vector<Point3D,std::allocator<Point3D>>>
                               *)param_1);
  lVar1 = *plVar2;
  plVar2 = (long *)__normal_iterator<Point3D*,std::vector<Point3D,std::allocator<Point3D>>>::base
                             ((__normal_iterator<Point3D*,std::vector<Point3D,std::allocator<Point3D>>>
                               *)param_2);
  return (lVar1 - *plVar2 >> 3) * -0x5555555555555555;
}



// std::_Vector_base<Point3D, std::allocator<Point3D> >::_M_allocate(unsigned long)

undefined8 __thiscall
std::_Vector_base<Point3D,std::allocator<Point3D>>::_M_allocate
          (_Vector_base<Point3D,std::allocator<Point3D>> *this,ulong param_1)

{
  undefined8 uVar1;
  
  if (param_1 == 0) {
    uVar1 = 0;
  }
  else {
    uVar1 = __new_allocator<Point3D>::allocate((ulong)this,(void *)param_1);
  }
  return uVar1;
}



// std::vector<Point3D, std::allocator<Point3D> >::_S_relocate(Point3D*, Point3D*, Point3D*,
// std::allocator<Point3D>&)

void std::vector<Point3D,std::allocator<Point3D>>::_S_relocate
               (Point3D *param_1,Point3D *param_2,Point3D *param_3,allocator *param_4)

{
  __relocate_a<Point3D*,Point3D*,std::allocator<Point3D>>(param_1,param_2,param_3,param_4);
  return;
}



// __normal_iterator<Point3D*, std::vector<Point3D, std::allocator<Point3D> > >::base() const

__normal_iterator<Point3D*,std::vector<Point3D,std::allocator<Point3D>>> * __thiscall
__normal_iterator<Point3D*,std::vector<Point3D,std::allocator<Point3D>>>::base
          (__normal_iterator<Point3D*,std::vector<Point3D,std::allocator<Point3D>>> *this)

{
  return this;
}



// __normal_iterator<Point3D*, std::vector<Point3D, std::allocator<Point3D> >
// >::TEMPNAMEPLACEHOLDERVALUE(long) const

undefined8 __thiscall
__normal_iterator<Point3D*,std::vector<Point3D,std::allocator<Point3D>>>::operator-
          (__normal_iterator<Point3D*,std::vector<Point3D,std::allocator<Point3D>>> *this,
          long param_1)

{
  long in_FS_OFFSET;
  Point3D *local_20;
  undefined8 local_18;
  long local_10;
  
  local_10 = *(long *)(in_FS_OFFSET + 0x28);
  local_20 = (Point3D *)(param_1 * -0x18 + *(long *)this);
  __normal_iterator((__normal_iterator<Point3D*,std::vector<Point3D,std::allocator<Point3D>>> *)
                    &local_18,&local_20);
  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {
                    // WARNING: Subroutine does not return
    __stack_chk_fail();
  }
  return local_18;
}



// __normal_iterator<Point3D*, std::vector<Point3D, std::allocator<Point3D> >
// >::TEMPNAMEPLACEHOLDERVALUE() const

undefined8 __thiscall
__normal_iterator<Point3D*,std::vector<Point3D,std::allocator<Point3D>>>::operator*
          (__normal_iterator<Point3D*,std::vector<Point3D,std::allocator<Point3D>>> *this)

{
  return *(undefined8 *)this;
}



// std::vector<Point3D, std::allocator<Point3D> >::max_size() const

void __thiscall
std::vector<Point3D,std::allocator<Point3D>>::max_size
          (vector<Point3D,std::allocator<Point3D>> *this)

{
  allocator *paVar1;
  
  paVar1 = (allocator *)
           _Vector_base<Point3D,std::allocator<Point3D>>::_M_get_Tp_allocator
                     ((_Vector_base<Point3D,std::allocator<Point3D>> *)this);
  _S_max_size(paVar1);
  return;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked
// unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&)

ulong * std::max<unsigned_long>(ulong *param_1,ulong *param_2)

{
  if (*param_1 < *param_2) {
    param_1 = param_2;
  }
  return param_1;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked
// Point3D* std::__relocate_a<Point3D*, Point3D*, std::allocator<Point3D> >(Point3D*, Point3D*,
// Point3D*, std::allocator<Point3D>&)

Point3D * std::__relocate_a<Point3D*,Point3D*,std::allocator<Point3D>>
                    (Point3D *param_1,Point3D *param_2,Point3D *param_3,allocator *param_4)

{
  Point3D *pPVar1;
  Point3D *pPVar2;
  Point3D *pPVar3;
  
  pPVar1 = __niter_base<Point3D*>(param_3);
  pPVar2 = __niter_base<Point3D*>(param_2);
  pPVar3 = __niter_base<Point3D*>(param_1);
  pPVar1 = __relocate_a_1<Point3D*,Point3D*,std::allocator<Point3D>>(pPVar3,pPVar2,pPVar1,param_4);
  return pPVar1;
}



// std::vector<Point3D, std::allocator<Point3D> >::_S_max_size(std::allocator<Point3D> const&)

ulong std::vector<Point3D,std::allocator<Point3D>>::_S_max_size(allocator *param_1)

{
  ulong *puVar1;
  long in_FS_OFFSET;
  ulong local_38 [2];
  allocator *local_28;
  allocator *local_20;
  allocator *local_18;
  long local_10;
  
  local_10 = *(long *)(in_FS_OFFSET + 0x28);
  local_38[0] = 0x555555555555555;
  local_38[1] = 0x555555555555555;
  local_28 = param_1;
  local_20 = param_1;
  local_18 = param_1;
  puVar1 = min<unsigned_long>(local_38,local_38 + 1);
  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {
                    // WARNING: Subroutine does not return
    __stack_chk_fail();
  }
  return *puVar1;
}



// std::_Vector_base<Point3D, std::allocator<Point3D> >::_M_get_Tp_allocator() const

_Vector_base<Point3D,std::allocator<Point3D>> * __thiscall
std::_Vector_base<Point3D,std::allocator<Point3D>>::_M_get_Tp_allocator
          (_Vector_base<Point3D,std::allocator<Point3D>> *this)

{
  return this;
}



// std::__new_allocator<Point3D>::allocate(unsigned long, void const*)

void std::__new_allocator<Point3D>::allocate(ulong param_1,void *param_2)

{
  if ((void *)0x555555555555555 < param_2) {
    if ((void *)0xaaaaaaaaaaaaaaa < param_2) {
      std::__throw_bad_array_new_length();
    }
    std::__throw_bad_alloc();
  }
  operator_new((long)param_2 * 0x18);
  return;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked
// Point3D* std::__niter_base<Point3D*>(Point3D*)

Point3D * std::__niter_base<Point3D*>(Point3D *param_1)

{
  return param_1;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked
// Point3D* std::__relocate_a_1<Point3D*, Point3D*, std::allocator<Point3D> >(Point3D*, Point3D*,
// Point3D*, std::allocator<Point3D>&)

Point3D * std::__relocate_a_1<Point3D*,Point3D*,std::allocator<Point3D>>
                    (Point3D *param_1,Point3D *param_2,Point3D *param_3,allocator *param_4)

{
  Point3D *pPVar1;
  Point3D *pPVar2;
  Point3D *local_30;
  Point3D *local_20;
  
  local_20 = param_3;
  for (local_30 = param_1; local_30 != param_2; local_30 = local_30 + 0x18) {
    pPVar1 = __addressof<Point3D>(local_30);
    pPVar2 = __addressof<Point3D>(local_20);
    __relocate_object_a<Point3D,Point3D,std::allocator<Point3D>>(pPVar2,pPVar1,param_4);
    local_20 = local_20 + 0x18;
  }
  return local_20;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked
// unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&)

ulong * std::min<unsigned_long>(ulong *param_1,ulong *param_2)

{
  if (*param_2 < *param_1) {
    param_1 = param_2;
  }
  return param_1;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked
// Point3D* std::__addressof<Point3D>(Point3D&)

Point3D * std::__addressof<Point3D>(Point3D *param_1)

{
  return param_1;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked
// void std::__relocate_object_a<Point3D, Point3D, std::allocator<Point3D> >(Point3D*, Point3D*,
// std::allocator<Point3D>&)

void std::__relocate_object_a<Point3D,Point3D,std::allocator<Point3D>>
               (Point3D *param_1,Point3D *param_2,allocator *param_3)

{
  undefined8 uVar1;
  type *ptVar2;
  Point3D *pPVar3;
  undefined8 *puVar4;
  
  ptVar2 = move<Point3D&>(param_2);
  pPVar3 = forward<Point3D>((type *)ptVar2);
  puVar4 = (undefined8 *)operator_new(0x18,param_1);
  pPVar3 = forward<Point3D>((type *)pPVar3);
  uVar1 = *(undefined8 *)(pPVar3 + 8);
  *puVar4 = *(undefined8 *)pPVar3;
  puVar4[1] = uVar1;
  puVar4[2] = *(undefined8 *)(pPVar3 + 0x10);
  __addressof<Point3D>(param_2);
  return;
}



// Line::Line(Point3D, Point3D)

void __thiscall Line::Line(Line *this)

{
  long in_FS_OFFSET;
  double in_stack_00000008;
  double in_stack_00000010;
  double in_stack_00000018;
  double in_stack_00000020;
  double in_stack_00000028;
  double in_stack_00000030;
  undefined8 local_28;
  undefined8 local_20;
  undefined8 local_18;
  long local_10;
  
  local_10 = *(long *)(in_FS_OFFSET + 0x28);
  *(double *)this = in_stack_00000008;
  *(double *)(this + 8) = in_stack_00000010;
  *(double *)(this + 0x10) = in_stack_00000018;
  *(double *)(this + 0x18) = in_stack_00000020;
  *(double *)(this + 0x20) = in_stack_00000028;
  *(double *)(this + 0x28) = in_stack_00000030;
  Vector::Vector((Vector *)(this + 0x30),0.0,0.0,0.0);
  Vector::Vector((Vector *)&local_28,in_stack_00000020 - in_stack_00000008,
                 in_stack_00000028 - in_stack_00000010,in_stack_00000030 - in_stack_00000018);
  *(undefined8 *)(this + 0x30) = local_28;
  *(undefined8 *)(this + 0x38) = local_20;
  *(undefined8 *)(this + 0x40) = local_18;
  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {
                    // WARNING: Subroutine does not return
    __stack_chk_fail();
  }
  return;
}



// Line::Line(Point3D, Vector)

void __thiscall Line::Line(Line *this)

{
  Line *pLVar1;
  long in_FS_OFFSET;
  undefined8 in_stack_00000008;
  undefined8 in_stack_00000010;
  undefined8 in_stack_00000018;
  undefined8 in_stack_00000020;
  undefined8 in_stack_00000028;
  undefined8 in_stack_00000030;
  undefined8 local_58;
  undefined8 local_50;
  undefined8 local_48;
  Line *local_30;
  long local_20;
  
  local_20 = *(long *)(in_FS_OFFSET + 0x28);
  *(undefined8 *)this = in_stack_00000008;
  *(undefined8 *)(this + 8) = in_stack_00000010;
  *(undefined8 *)(this + 0x10) = in_stack_00000018;
  local_30 = this;
  Point3D::Point3D((Point3D *)(this + 0x18),0.0,0.0,0.0);
  pLVar1 = local_30;
  *(undefined8 *)(local_30 + 0x30) = in_stack_00000020;
  *(undefined8 *)(local_30 + 0x38) = in_stack_00000028;
  *(undefined8 *)(local_30 + 0x40) = in_stack_00000030;
  Point3D::operator+((Point3D *)&local_58,(Vector *)&stack0x00000008);
  *(undefined8 *)(pLVar1 + 0x18) = local_58;
  *(undefined8 *)(pLVar1 + 0x20) = local_50;
  *(undefined8 *)(pLVar1 + 0x28) = local_48;
  if (local_20 != *(long *)(in_FS_OFFSET + 0x28)) {
                    // WARNING: Subroutine does not return
    __stack_chk_fail();
  }
  return;
}



// Line::get_intersection_point(Line const&)

Line * Line::get_intersection_point(Line *param_1)

{
  double *in_RDX;
  double *in_RSI;
  long in_FS_OFFSET;
  Point3D local_99;
  double local_98;
  double local_90;
  Vector local_88 [32];
  Vector local_68 [32];
  Point3D local_48 [32];
  Point3D local_28 [24];
  long local_10;
  
  local_10 = *(long *)(in_FS_OFFSET + 0x28);
  Vector::cross(local_88);
  local_98 = (double)Vector::dot(local_88,local_88);
  if (1e-06 <= ABS(local_98)) {
    Vector::Vector(local_68,*in_RDX - *in_RSI,in_RDX[1] - in_RSI[1],in_RDX[2] - in_RSI[2]);
    Vector::cross((Vector *)local_48);
    local_90 = (double)Vector::dot((Vector *)local_48,local_88);
    local_90 = local_90 / local_98;
    Point3D::Point3D(local_28,*in_RSI + in_RSI[6] * local_90,in_RSI[1] + in_RSI[7] * local_90,
                     in_RSI[2] + in_RSI[8] * local_90);
    local_99 = (Point3D)0x1;
    std::make_pair<bool,Point3D&>((bool *)param_1,&local_99);
  }
  else {
    Point3D::Point3D(local_28,0.0,0.0,0.0);
    local_48[0] = (Point3D)0x0;
    std::make_pair<bool,Point3D>((bool *)param_1,local_48);
  }
  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {
                    // WARNING: Subroutine does not return
    __stack_chk_fail();
  }
  return param_1;
}



// Line::get_distance_from_point(Point3D const&)

double __thiscall Line::get_distance_from_point(Line *this,Point3D *param_1)

{
  long in_FS_OFFSET;
  double dVar1;
  double dVar2;
  Vector local_58 [32];
  Vector local_38 [24];
  long local_20;
  
  local_20 = *(long *)(in_FS_OFFSET + 0x28);
  Vector::Vector(local_58,*(double *)param_1 - *(double *)this,
                 *(double *)(param_1 + 8) - *(double *)(this + 8),
                 *(double *)(param_1 + 0x10) - *(double *)(this + 0x10));
  Vector::cross(local_38);
  dVar1 = (double)Vector::norm(local_38);
  dVar2 = (double)Vector::norm((Vector *)(this + 0x30));
  if (local_20 != *(long *)(in_FS_OFFSET + 0x28)) {
                    // WARNING: Subroutine does not return
    __stack_chk_fail();
  }
  return dVar1 / dVar2;
}



// Line::get_distance_from_point_along_vector(Point3D const&, Vector const&)

void Line::get_distance_from_point_along_vector(Point3D *param_1,Vector *param_2)

{
  long in_FS_OFFSET;
  Line local_78 [8];
  Point3D aPStack_70 [24];
  Line local_58 [72];
  long local_10;
  
  local_10 = *(long *)(in_FS_OFFSET + 0x28);
  Line(local_58);
  get_intersection_point(local_78);
  if (local_78[0] == (Line)0x0) {
    get_distance_from_point((Line *)param_1,(Point3D *)param_2);
  }
  else {
    Point3D::distance(aPStack_70,(Point3D *)param_2);
  }
  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {
                    // WARNING: Subroutine does not return
    __stack_chk_fail();
  }
  return;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked
// std::pair<std::__strip_reference_wrapper<std::decay<bool>::type>::__type,
// std::__strip_reference_wrapper<std::decay<Point3D>::type>::__type> std::make_pair<bool,
// Point3D>(bool&&, Point3D&&)

bool * std::make_pair<bool,Point3D>(bool *param_1,Point3D *param_2)

{
  Point3D *pPVar1;
  bool *pbVar2;
  type *in_RDX;
  
  pPVar1 = forward<Point3D>(in_RDX);
  pbVar2 = forward<bool>((type *)param_2);
  pair<bool,Point3D>::pair<bool,Point3D,true>((pair<bool,Point3D> *)param_1,pbVar2,pPVar1);
  return param_1;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked
// std::pair<std::__strip_reference_wrapper<std::decay<bool>::type>::__type,
// std::__strip_reference_wrapper<std::decay<Point3D&>::type>::__type> std::make_pair<bool,
// Point3D&>(bool&&, Point3D&)

bool * std::make_pair<bool,Point3D&>(bool *param_1,Point3D *param_2)

{
  Point3D *pPVar1;
  bool *pbVar2;
  type *in_RDX;
  
  pPVar1 = forward<Point3D&>(in_RDX);
  pbVar2 = forward<bool>((type *)param_2);
  pair<bool,Point3D>::pair<bool,Point3D&,true>((pair<bool,Point3D> *)param_1,pbVar2,pPVar1);
  return param_1;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked
// bool&& std::forward<bool>(std::remove_reference<bool>::type&)

bool * std::forward<bool>(type *param_1)

{
  return (bool *)param_1;
}



// std::pair<bool, Point3D>::pair<bool, Point3D, true>(bool&&, Point3D&&)

void __thiscall
std::pair<bool,Point3D>::pair<bool,Point3D,true>
          (pair<bool,Point3D> *this,bool *param_1,Point3D *param_2)

{
  undefined8 uVar1;
  pair<bool,Point3D> *ppVar2;
  Point3D *pPVar3;
  
  ppVar2 = (pair<bool,Point3D> *)forward<bool>((type *)param_1);
  *this = *ppVar2;
  pPVar3 = forward<Point3D>((type *)param_2);
  uVar1 = *(undefined8 *)(pPVar3 + 8);
  *(undefined8 *)(this + 8) = *(undefined8 *)pPVar3;
  *(undefined8 *)(this + 0x10) = uVar1;
  *(undefined8 *)(this + 0x18) = *(undefined8 *)(pPVar3 + 0x10);
  return;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked
// Point3D& std::forward<Point3D&>(std::remove_reference<Point3D&>::type&)

Point3D * std::forward<Point3D&>(type *param_1)

{
  return (Point3D *)param_1;
}



// std::pair<bool, Point3D>::pair<bool, Point3D&, true>(bool&&, Point3D&)

void __thiscall
std::pair<bool,Point3D>::pair<bool,Point3D&,true>
          (pair<bool,Point3D> *this,bool *param_1,Point3D *param_2)

{
  undefined8 uVar1;
  pair<bool,Point3D> *ppVar2;
  Point3D *pPVar3;
  
  ppVar2 = (pair<bool,Point3D> *)forward<bool>((type *)param_1);
  *this = *ppVar2;
  pPVar3 = forward<Point3D&>((type *)param_2);
  uVar1 = *(undefined8 *)(pPVar3 + 8);
  *(undefined8 *)(this + 8) = *(undefined8 *)pPVar3;
  *(undefined8 *)(this + 0x10) = uVar1;
  *(undefined8 *)(this + 0x18) = *(undefined8 *)(pPVar3 + 0x10);
  return;
}



void _fini(void)

{
  return;
}



